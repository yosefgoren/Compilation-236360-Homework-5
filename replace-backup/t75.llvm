declare i32 @printf(i8*, ...)
declare void @exit(i32)
@.int_specifier = constant [4 x i8] c"%d\0A\00"
@.str_specifier = constant [4 x i8] c"%s\0A\00"
define void @printi(i32) {
    %spec_ptr = getelementptr [4 x i8], [4 x i8]* @.int_specifier, i32 0, i32 0
    call i32 (i8*, ...) @printf(i8* %spec_ptr, i32 %0)
    ret void
}
define void @print(i8*) {
    %spec_ptr = getelementptr [4 x i8], [4 x i8]* @.str_specifier, i32 0, i32 0
    call i32 (i8*, ...) @printf(i8* %spec_ptr, i8* %0)
    ret void
}
@.str_div_zero = constant [23 x i8] c"Error division by zero\00"
define void @errorIfZero9001(i32) {
	%cond = icmp eq i32 0, %0
	br i1 %cond, label %exit, label %return
exit:
	%err_str_ptr = getelementptr [23 x i8], [23 x i8]* @.str_div_zero, i32 0, i32 0
	call void(i8*) @print(i8* %err_str_ptr)
	call void(i32) @exit(i32 1)
	br label %return
return:
	ret void
}
@.string_id0 = constant [23 x i8] c"this should not happen\00"
define i8@zero(){
%sp = alloca [50 x i32]
br label %statement_3
statement_3:
ret i8 0
br label %func_end_6
func_end_6:
ret i8 0
}
define i32@willThisNeedManyRegisters(i32, i32, i32, i32, i32, i32, i32){
%sp = alloca [50 x i32]
br label %statement_12
statement_12:
%reg1 = call i8() @zero()
%reg2 = add i8 0, %reg1
%reg3 = add i32 0, %0
%b2int_conv_reg4 = zext i8 %reg2 to i32
%reg5 = mul i32 %b2int_conv_reg4, %reg3
%reg6 = add i32 0, %0
%reg7 = mul i32 %reg5, %reg6
%reg8 = add i32 0, %0
%reg9 = add i32 0, %0
%reg10 = mul i32 %reg8, %reg9
%reg11 = add i32 %reg7, %reg10
%reg12 = add i32 0, %1
%reg13 = add i32 0, %2
%reg14 = mul i32 %reg12, %reg13
%reg15 = add i32 0, %0
%reg16 = mul i32 %reg14, %reg15
%reg17 = add i32 %reg11, %reg16
%reg18 = add i32 0, %3
%reg19 = add i32 0, %1
%reg20 = mul i32 %reg18, %reg19
%reg21 = add i32 0, %4
%reg22 = mul i32 %reg20, %reg21
%reg23 = add i32 0, %5
call void(i32) @errorIfZero9001(i32 %reg23)
%reg24 = sdiv i32 %reg22, %reg23
%reg25 = sub i32 %reg17, %reg24
%reg26 = add i32 0, %5
%reg27 = add i32 %reg25, %reg26
%reg28 = add i32 0, %6
%reg29 = add i32 0, %6
%reg30 = mul i32 %reg28, %reg29
%reg31 = add i32 0, %6
%reg32 = mul i32 %reg30, %reg31
%reg33 = add i32 %reg27, %reg32
%reg34 = add i32 0, %1
%reg35 = sub i32 %reg33, %reg34
ret i32%reg35
br label %func_end_51
func_end_51:
ret i32 0
}
define void@main(){
%sp = alloca [50 x i32]
br label %statement_57
statement_57:
%reg36 = mul i32  3,  6
call void(i32) @errorIfZero9001(i32  4)
%reg37 = sdiv i32 %reg36,  4
%reg38 = add i32  2, %reg37
%reg39 = sub i32 %reg38,  1
call void(i32) @printi(i32 %reg39)
br label %statement_65
statement_65:
%b2int_conv_reg40 = zext i8  23 to i32
%reg41 = mul i32 %b2int_conv_reg40,  12
%reg42 = add i32 %reg41,  459
call void(i32) @printi(i32 %reg42)
br label %statement_71
statement_71:
%reg43 = call i32(i32, i32, i32, i32, i32, i32, i32) @willThisNeedManyRegisters(i32  0, i32  1, i32  2, i32  3, i32  4, i32  5, i32  6)
%reg44 = add i32 0, %reg43
call void(i32) @printi(i32 %reg44)
br label %statement_76
statement_76:
%reg45 = call i8() @zero()
%reg46 = add i8 0, %reg45
%raw_reg47 = zext i8 %reg46 to i32
call void(i32) @errorIfZero9001(i32 %raw_reg47)
%b2int_conv_reg48 = zext i8 %reg46 to i32
%reg49 = sdiv i32  12, %b2int_conv_reg48
%reg50 = getelementptr [50 x i32], [50 x i32]* %sp, i32 0, i32 0
store i32 %reg49, i32* %reg50
br label %statement_86
statement_86:
%str_ptr_reg51 = getelementptr [23 x i8], [23 x i8]* @.string_id0, i32 0, i32 0
call void(i8*) @print(i8* %str_ptr_reg51)
br label %func_end_91
br label %func_end_91
func_end_91:
ret void
}
