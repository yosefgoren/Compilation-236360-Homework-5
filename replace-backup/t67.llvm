declare i32 @printf(i8*, ...)
declare void @exit(i32)
@.int_specifier = constant [4 x i8] c"%d\0A\00"
@.str_specifier = constant [4 x i8] c"%s\0A\00"
define void @printi(i32) {
    %spec_ptr = getelementptr [4 x i8], [4 x i8]* @.int_specifier, i32 0, i32 0
    call i32 (i8*, ...) @printf(i8* %spec_ptr, i32 %0)
    ret void
}
define void @print(i8*) {
    %spec_ptr = getelementptr [4 x i8], [4 x i8]* @.str_specifier, i32 0, i32 0
    call i32 (i8*, ...) @printf(i8* %spec_ptr, i8* %0)
    ret void
}
@.str_div_zero = constant [23 x i8] c"Error division by zero\00"
define void @errorIfZero9001(i32) {
	%cond = icmp eq i32 0, %0
	br i1 %cond, label %exit, label %return
exit:
	%err_str_ptr = getelementptr [23 x i8], [23 x i8]* @.str_div_zero, i32 0, i32 0
	call void(i8*) @print(i8* %err_str_ptr)
	call void(i32) @exit(i32 1)
	br label %return
return:
	ret void
}
@.string_id0 = constant [4 x i8] c"foo\00"
define i1@printFoo(){
%sp = alloca [50 x i32]
br label %statement_3
statement_3:
%str_ptr_reg1 = getelementptr [4 x i8], [4 x i8]* @.string_id0, i32 0, i32 0
call void(i8*) @print(i8* %str_ptr_reg1)
br label %statement_7
statement_7:
br label %true_case_9
true_case_9:
br label %set_bool_reg_13
false_case_11:
br label %set_bool_reg_13
set_bool_reg_13:
%reg2 = phi i1 [1, %true_case_9], [0, %false_case_11]
ret i1 %reg2
br label %func_end_17
func_end_17:
ret i1 0
}
define void@main(){
%sp = alloca [50 x i32]
br label %statement_23
statement_23:
br label %true_case_32
parse_label_25:
%reg3 = call i1() @printFoo()
br i1 %reg3, label %true_case_28, label %false_case_30
true_case_28:
br label %true_case_32
false_case_30:
br label %false_case_34
true_case_32:
br label %set_bool_reg_36
false_case_34:
br label %set_bool_reg_36
set_bool_reg_36:
%reg4 = phi i32 [1, %true_case_32], [0, %false_case_34]
%reg5 = getelementptr [50 x i32], [50 x i32]* %sp, i32 0, i32 0
store i32 %reg4, i32* %reg5
br label %statement_41
statement_41:
ret void
br label %func_end_44
func_end_44:
ret void
}
