declare i32 @printf(i8*, ...)
declare void @exit(i32)
@.int_specifier = constant [4 x i8] c"%d\0A\00"
@.str_specifier = constant [4 x i8] c"%s\0A\00"
define void @printi(i32) {
    %spec_ptr = getelementptr [4 x i8], [4 x i8]* @.int_specifier, i32 0, i32 0
    call i32 (i8*, ...) @printf(i8* %spec_ptr, i32 %0)
    ret void
}
define void @print(i8*) {
    %spec_ptr = getelementptr [4 x i8], [4 x i8]* @.str_specifier, i32 0, i32 0
    call i32 (i8*, ...) @printf(i8* %spec_ptr, i8* %0)
    ret void
}
@.str_div_zero = constant [23 x i8] c"Error division by zero\00"
define void @errorIfZero9001(i32) {
	%cond = icmp eq i32 0, %0
	br i1 %cond, label %exit, label %return
exit:
	%err_str_ptr = getelementptr [23 x i8], [23 x i8]* @.str_div_zero, i32 0, i32 0
	call void(i8*) @print(i8* %err_str_ptr)
	call void(i32) @exit(i32 1)
	br label %return
return:
	ret void
}
define void@bar(){
%sp = alloca [50 x i32]
br label %statement_3
statement_3:
br label %false_case_7
true_case_5:
br label %set_bool_reg_9
false_case_7:
br label %set_bool_reg_9
set_bool_reg_9:
%reg1 = phi i32 [1, %true_case_5], [0, %false_case_7]
%reg2 = getelementptr [50 x i32], [50 x i32]* %sp, i32 0, i32 0
store i32 %reg1, i32* %reg2
br label %statement_14
statement_14:
%reg3 = getelementptr [50 x i32], [50 x i32]* %sp, i32 0, i32 1
store i32 55, i32* %reg3
br label %parse_label_18
parse_label_18:
%param_ptr4 = getelementptr [50 x i32], [50 x i32]* %sp, i32 0, i32 0
%param_raw5 = load i32, i32* %param_ptr4
%reg6 = trunc i32 %param_raw5 to i1
br i1 %reg6, label %true_case_23, label %false_case_25
true_case_23:
br label %statement_27
false_case_25:
br label %parse_label_34
statement_27:
%param_ptr7 = getelementptr [50 x i32], [50 x i32]* %sp, i32 0, i32 1
%param_raw8 = load i32, i32* %param_ptr7
%reg9 = add i32 0, %param_raw8
%reg10 = mul i32 2, %reg9
call void(i32) @printi(i32 %reg10)
br label %parse_label_34
parse_label_34:
%param_ptr11 = getelementptr [50 x i32], [50 x i32]* %sp, i32 0, i32 0
%param_raw12 = load i32, i32* %param_ptr11
%reg13 = trunc i32 %param_raw12 to i1
br i1 %reg13, label %true_case_39, label %false_case_41
true_case_39:
br label %func_end_50
false_case_41:
br label %statement_43
statement_43:
%param_ptr14 = getelementptr [50 x i32], [50 x i32]* %sp, i32 0, i32 1
%param_raw15 = load i32, i32* %param_ptr14
%reg16 = add i32 0, %param_raw15
call void(i32) @printi(i32 %reg16)
br label %func_end_50
br label %func_end_50
func_end_50:
ret void
}
define void@main(){
%sp = alloca [50 x i32]
br label %statement_56
statement_56:
call void() @bar()
br label %func_end_60
br label %func_end_60
func_end_60:
ret void
}
