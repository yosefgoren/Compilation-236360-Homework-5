declare i32 @printf(i8*, ...)
declare void @exit(i32)
@.int_specifier = constant [4 x i8] c"%d\0A\00"
@.str_specifier = constant [4 x i8] c"%s\0A\00"
define void @printi(i32) {
    %spec_ptr = getelementptr [4 x i8], [4 x i8]* @.int_specifier, i32 0, i32 0
    call i32 (i8*, ...) @printf(i8* %spec_ptr, i32 %0)
    ret void
}
define void @print(i8*) {
    %spec_ptr = getelementptr [4 x i8], [4 x i8]* @.str_specifier, i32 0, i32 0
    call i32 (i8*, ...) @printf(i8* %spec_ptr, i8* %0)
    ret void
}
@.str_div_zero = constant [23 x i8] c"Error division by zero\00"
define void @errorIfZero9001(i32) {
	%cond = icmp eq i32 0, %0
	br i1 %cond, label %exit, label %return
exit:
	%err_str_ptr = getelementptr [23 x i8], [23 x i8]* @.str_div_zero, i32 0, i32 0
	call void(i8*) @print(i8* %err_str_ptr)
	call void(i32) @exit(i32 1)
	br label %return
return:
	ret void
}
define i8@foo(i32, i32){
%sp = alloca [50 x i32]
br label %statement_3
statement_3:
%reg1 = add i32 0, %0
%reg2 = getelementptr [50 x i32], [50 x i32]* %sp, i32 0, i32 0
store i32 %reg1, i32* %reg2
br label %cond_8
cond_8:
%param_ptr3 = getelementptr [50 x i32], [50 x i32]* %sp, i32 0, i32 0
%param_raw4 = load i32, i32* %param_ptr3
%reg5 = add i32 0, %param_raw4
%reg6 = icmp sgt i32 %reg5, 0
br i1 %reg6, label %parse_label_14, label %statement_34
parse_label_14:
%truncated_byte7 = trunc i32 %1 to i8
%reg8 = add i8 0, %truncated_byte7
%b2int_conv_reg9 = zext i8 %reg8 to i32
%reg10 = mul i32 2, %b2int_conv_reg9
%param_ptr11 = getelementptr [50 x i32], [50 x i32]* %sp, i32 0, i32 0
%param_raw12 = load i32, i32* %param_ptr11
%reg13 = add i32 0, %param_raw12
%reg14 = icmp eq i32 %reg10, %reg13
br i1 %reg14, label %statement_24, label %statement_26
statement_24:
br label %statement_34
statement_26:
%param_ptr15 = getelementptr [50 x i32], [50 x i32]* %sp, i32 0, i32 0
%param_raw16 = load i32, i32* %param_ptr15
%reg17 = add i32 0, %param_raw16
%reg18 = sub i32 %reg17, 1
%reg19 = getelementptr [50 x i32], [50 x i32]* %sp, i32 0, i32 0
store i32 %reg18, i32* %reg19
br label %cond_8
statement_34:
%param_ptr20 = getelementptr [50 x i32], [50 x i32]* %sp, i32 0, i32 0
%param_raw21 = load i32, i32* %param_ptr20
%reg22 = add i32 0, %param_raw21
%int2byte_conv_reg23 = trunc i32 %reg22 to i8
ret i8 %int2byte_conv_reg23
br label %func_end_41
func_end_41:
ret i8 0
}
define void@main(){
%sp = alloca [50 x i32]
br label %statement_47
statement_47:
%int2byte_conv_reg24 = trunc i32 3 to i8
%raw_reg25 = zext i8 %int2byte_conv_reg24 to i32
%reg26 = call i8(i32, i32) @foo(i32 10, i32 %raw_reg25)
%reg27 = add i8 0, %reg26
%raw_reg28 = zext i8 %reg27 to i32
call void(i32) @printi(i32 %raw_reg28)
br label %statement_55
statement_55:
%int2byte_conv_reg29 = trunc i32 20 to i8
%raw_reg30 = zext i8 %int2byte_conv_reg29 to i32
%reg31 = call i8(i32, i32) @foo(i32 10, i32 %raw_reg30)
%reg32 = add i8 0, %reg31
%raw_reg33 = zext i8 %reg32 to i32
call void(i32) @printi(i32 %raw_reg33)
br label %func_end_64
br label %func_end_64
func_end_64:
ret void
}
