declare i32 @printf(i8*, ...)
declare void @exit(i32)
@.int_specifier = constant [4 x i8] c"%d\0A\00"
@.str_specifier = constant [4 x i8] c"%s\0A\00"
define void @printi(i32) {
    %spec_ptr = getelementptr [4 x i8], [4 x i8]* @.int_specifier, i32 0, i32 0
    call i32 (i8*, ...) @printf(i8* %spec_ptr, i32 %0)
    ret void
}
define void @print(i8*) {
    %spec_ptr = getelementptr [4 x i8], [4 x i8]* @.str_specifier, i32 0, i32 0
    call i32 (i8*, ...) @printf(i8* %spec_ptr, i8* %0)
    ret void
}
@.str_div_zero = constant [23 x i8] c"Error division by zero\00"
define void @errorIfZero9001(i32) {
	%cond = icmp eq i32 0, %0
	br i1 %cond, label %exit, label %return
exit:
	%err_str_ptr = getelementptr [23 x i8], [23 x i8]* @.str_div_zero, i32 0, i32 0
	call void(i8*) @print(i8* %err_str_ptr)
	call void(i32) @exit(i32 1)
	br label %return
return:
	ret void
}
define void@main(){
%sp = alloca [50 x i32]
br label %statement_3
statement_3:
%int2byte_conv_reg1 = trunc i32 3 to i8
%raw_reg2 = zext i8 %int2byte_conv_reg1 to i32
%reg3 = getelementptr [50 x i32], [50 x i32]* %sp, i32 0, i32 0
store i32 %raw_reg2, i32* %reg3
br label %cond_9
cond_9:
%param_ptr4 = getelementptr [50 x i32], [50 x i32]* %sp, i32 0, i32 0
%param_raw5 = load i32, i32* %param_ptr4
%truncated_byte6 = trunc i32 %param_raw5 to i8
%reg7 = add i8 0, %truncated_byte6
%b2int_conv_reg8 = zext i8 %reg7 to i32
%reg9 = icmp sgt i32 %b2int_conv_reg8, 0
br i1 %reg9, label %cond_17, label %func_end_74
cond_17:
br label %statement_19
statement_19:
br label %statement_21
statement_21:
%reg10 = getelementptr [50 x i32], [50 x i32]* %sp, i32 0, i32 1
store i32 2, i32* %reg10
br label %cond_25
cond_25:
%param_ptr11 = getelementptr [50 x i32], [50 x i32]* %sp, i32 0, i32 1
%param_raw12 = load i32, i32* %param_ptr11
%reg13 = add i32 0, %param_raw12
%reg14 = icmp sgt i32 %reg13, 0
br i1 %reg14, label %statement_31, label %statement_54
statement_31:
%param_ptr15 = getelementptr [50 x i32], [50 x i32]* %sp, i32 0, i32 1
%param_raw16 = load i32, i32* %param_ptr15
%reg17 = add i32 0, %param_raw16
%reg18 = sub i32 %reg17, 1
%reg19 = getelementptr [50 x i32], [50 x i32]* %sp, i32 0, i32 1
store i32 %reg18, i32* %reg19
br label %parse_label_39
parse_label_39:
%param_ptr20 = getelementptr [50 x i32], [50 x i32]* %sp, i32 0, i32 1
%param_raw21 = load i32, i32* %param_ptr20
%reg22 = add i32 0, %param_raw21
%reg23 = icmp eq i32 %reg22, 1
br i1 %reg23, label %statement_45, label %statement_47
statement_45:
br label %cond_25
statement_47:
%param_ptr24 = getelementptr [50 x i32], [50 x i32]* %sp, i32 0, i32 1
%param_raw25 = load i32, i32* %param_ptr24
%reg26 = add i32 0, %param_raw25
%reg27 = add i32 10, %reg26
call void(i32) @printi(i32 %reg27)
br label %cond_25
statement_54:
%param_ptr28 = getelementptr [50 x i32], [50 x i32]* %sp, i32 0, i32 0
%param_raw29 = load i32, i32* %param_ptr28
%truncated_byte30 = trunc i32 %param_raw29 to i8
%reg31 = add i8 0, %truncated_byte30
%raw_reg32 = zext i8 %reg31 to i32
call void(i32) @printi(i32 %raw_reg32)
br label %statement_62
statement_62:
%param_ptr33 = getelementptr [50 x i32], [50 x i32]* %sp, i32 0, i32 0
%param_raw34 = load i32, i32* %param_ptr33
%truncated_byte35 = trunc i32 %param_raw34 to i8
%reg36 = add i8 0, %truncated_byte35
%int2byte_conv_reg37 = trunc i32 1 to i8
%reg38 = sub i8 %reg36, %int2byte_conv_reg37
%raw_reg39 = zext i8 %reg38 to i32
%reg40 = getelementptr [50 x i32], [50 x i32]* %sp, i32 0, i32 0
store i32 %raw_reg39, i32* %reg40
br label %cond_9
br label %func_end_74
func_end_74:
ret void
}
