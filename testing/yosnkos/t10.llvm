declare i32 @printf(i8*, ...)
declare void @exit(i32)
@.int_specifier = constant [4 x i8] c"%d\0A\00"
@.str_specifier = constant [4 x i8] c"%s\0A\00"
define void @printi(i32) {
    %spec_ptr = getelementptr [4 x i8], [4 x i8]* @.int_specifier, i32 0, i32 0
    call i32 (i8*, ...) @printf(i8* %spec_ptr, i32 %0)
    ret void
}
define void @print(i8*) {
    %spec_ptr = getelementptr [4 x i8], [4 x i8]* @.str_specifier, i32 0, i32 0
    call i32 (i8*, ...) @printf(i8* %spec_ptr, i8* %0)
    ret void
}
@.str_div_zero = constant [23 x i8] c"Error division by zero\00"
define void @errorIfZero9001(i32) {
	%cond = icmp eq i32 0, %0
	br i1 %cond, label %exit, label %return
exit:
	%err_str_ptr = getelementptr [23 x i8], [23 x i8]* @.str_div_zero, i32 0, i32 0
	call void(i8*) @print(i8* %err_str_ptr)
	call void(i32) @exit(i32 1)
	br label %return
return:
	ret void
}
define i1@trutru(){
%sp = alloca [50 x i32]
br label %statement_3
statement_3:
call void(i32) @printi(i32 9001)
br label %statement_6
statement_6:
br label %true_case_8
true_case_8:
br label %set_bool_reg_12
false_case_10:
br label %set_bool_reg_12
set_bool_reg_12:
%reg1 = phi i1 [1, %true_case_8], [0, %false_case_10]
ret i1 %reg1
br label %func_end_16
func_end_16:
ret i1 0
}
define void@main(){
%sp = alloca [50 x i32]
br label %parse_label_22
parse_label_22:
br label %statement_31
parse_label_24:
%reg2 = call i1() @trutru()
br i1 %reg2, label %true_case_27, label %false_case_29
true_case_27:
br label %statement_31
false_case_29:
br label %func_end_35
statement_31:
call void(i32) @printi(i32 9002)
br label %func_end_35
br label %func_end_35
func_end_35:
ret void
}
