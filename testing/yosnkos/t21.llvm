declare i32 @printf(i8*, ...)
declare void @exit(i32)
@.int_specifier = constant [4 x i8] c"%d\0A\00"
@.str_specifier = constant [4 x i8] c"%s\0A\00"
define void @printi(i32) {
    %spec_ptr = getelementptr [4 x i8], [4 x i8]* @.int_specifier, i32 0, i32 0
    call i32 (i8*, ...) @printf(i8* %spec_ptr, i32 %0)
    ret void
}
define void @print(i8*) {
    %spec_ptr = getelementptr [4 x i8], [4 x i8]* @.str_specifier, i32 0, i32 0
    call i32 (i8*, ...) @printf(i8* %spec_ptr, i8* %0)
    ret void
}
@.str_div_zero = constant [23 x i8] c"Error division by zero\00"
define void @errorIfZero9001(i32) {
	%cond = icmp eq i32 0, %0
	br i1 %cond, label %exit, label %return
exit:
	%err_str_ptr = getelementptr [23 x i8], [23 x i8]* @.str_div_zero, i32 0, i32 0
	call void(i8*) @print(i8* %err_str_ptr)
	call void(i32) @exit(i32 1)
	br label %return
return:
	ret void
}
define i32@foo(){
%sp = alloca [50 x i32]
br label %statement_3
statement_3:
%reg1 = getelementptr [50 x i32], [50 x i32]* %sp, i32 0, i32 0
store i32 0, i32* %reg1
br label %statement_7
statement_7:
%param_ptr2 = getelementptr [50 x i32], [50 x i32]* %sp, i32 0, i32 0
%param_raw3 = load i32, i32* %param_ptr2
%reg4 = add i32 0, %param_raw3
ret i32%reg4
br label %func_end_13
func_end_13:
ret i32 0
}
define i8@bar(){
%sp = alloca [50 x i32]
br label %statement_19
statement_19:
%reg5 = getelementptr [50 x i32], [50 x i32]* %sp, i32 0, i32 0
store i32 0, i32* %reg5
br label %statement_23
statement_23:
%param_ptr6 = getelementptr [50 x i32], [50 x i32]* %sp, i32 0, i32 0
%param_raw7 = load i32, i32* %param_ptr6
%truncated_byte8 = trunc i32 %param_raw7 to i8
%reg9 = add i8 0, %truncated_byte8
ret i8%reg9
br label %func_end_30
func_end_30:
ret i8 0
}
define i1@zoo(){
%sp = alloca [50 x i32]
br label %statement_36
statement_36:
%reg10 = getelementptr [50 x i32], [50 x i32]* %sp, i32 0, i32 0
store i32 0, i32* %reg10
br label %statement_40
statement_40:
%param_ptr11 = getelementptr [50 x i32], [50 x i32]* %sp, i32 0, i32 0
%param_raw12 = load i32, i32* %param_ptr11
%reg13 = trunc i32 %param_raw12 to i1
br i1 %reg13, label %true_case_45, label %false_case_47
true_case_45:
br label %true_case_49
false_case_47:
br label %false_case_51
true_case_49:
br label %set_bool_reg_53
false_case_51:
br label %set_bool_reg_53
set_bool_reg_53:
%reg14 = phi i1 [1, %true_case_49], [0, %false_case_51]
ret i1 %reg14
br label %func_end_57
func_end_57:
ret i1 0
}
define void@main(){
%sp = alloca [50 x i32]
br label %statement_63
statement_63:
%reg15 = call i32() @foo()
%reg16 = add i32 0, %reg15
call void(i32) @printi(i32 %reg16)
br label %statement_68
statement_68:
%reg17 = call i8() @bar()
%reg18 = add i8 0, %reg17
%raw_reg19 = zext i8 %reg18 to i32
call void(i32) @printi(i32 %raw_reg19)
br label %parse_label_74
parse_label_74:
%reg20 = call i1() @zoo()
br i1 %reg20, label %true_case_77, label %false_case_79
true_case_77:
br label %statement_81
false_case_79:
br label %statement_84
statement_81:
call void(i32) @printi(i32  1)
br label %func_end_88
statement_84:
call void(i32) @printi(i32  0)
br label %func_end_88
br label %func_end_88
func_end_88:
ret void
}
