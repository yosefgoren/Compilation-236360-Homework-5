declare i32 @printf(i8*, ...)
declare void @exit(i32)
@.int_specifier = constant [4 x i8] c"%d\0A\00"
@.str_specifier = constant [4 x i8] c"%s\0A\00"
define void @printi(i32) {
    %spec_ptr = getelementptr [4 x i8], [4 x i8]* @.int_specifier, i32 0, i32 0
    call i32 (i8*, ...) @printf(i8* %spec_ptr, i32 %0)
    ret void
}
define void @print(i8*) {
    %spec_ptr = getelementptr [4 x i8], [4 x i8]* @.str_specifier, i32 0, i32 0
    call i32 (i8*, ...) @printf(i8* %spec_ptr, i8* %0)
    ret void
}
@.str_div_zero = constant [23 x i8] c"Error division by zero\00"
define void @errorIfZero9001(i32) {
	%cond = icmp eq i32 0, %0
	br i1 %cond, label %exit, label %return
exit:
	%err_str_ptr = getelementptr [23 x i8], [23 x i8]* @.str_div_zero, i32 0, i32 0
	call void(i8*) @print(i8* %err_str_ptr)
	call void(i32) @exit(i32 1)
	br label %return
return:
	ret void
}
define void@hello(i32, i32){
%sp = alloca [50 x i32]
br label %statement_3
statement_3:
ret void
br label %func_end_6
func_end_6:
ret void
}
define i1@OR(i32, i32){
%sp = alloca [50 x i32]
br label %parse_label_12
parse_label_12:
%reg1 = trunc i32 %0 to i1
br i1 %reg1, label %true_case_15, label %false_case_17
true_case_15:
br label %statement_19
false_case_17:
br label %statement_28
statement_19:
br label %true_case_21
true_case_21:
br label %set_bool_reg_25
false_case_23:
br label %set_bool_reg_25
set_bool_reg_25:
%reg2 = phi i1 [1, %true_case_21], [0, %false_case_23]
ret i1 %reg2
statement_28:
%reg3 = trunc i32 %1 to i1
br i1 %reg3, label %true_case_31, label %false_case_33
true_case_31:
br label %true_case_35
false_case_33:
br label %false_case_37
true_case_35:
br label %set_bool_reg_39
false_case_37:
br label %set_bool_reg_39
set_bool_reg_39:
%reg4 = phi i1 [1, %true_case_35], [0, %false_case_37]
ret i1 %reg4
br label %func_end_43
func_end_43:
ret i1 0
}
define i1@NOT(i32){
%sp = alloca [50 x i32]
br label %parse_label_49
parse_label_49:
%reg5 = trunc i32 %0 to i1
br i1 %reg5, label %true_case_52, label %false_case_54
true_case_52:
br label %statement_56
false_case_54:
br label %statement_65
statement_56:
br label %false_case_60
true_case_58:
br label %set_bool_reg_62
false_case_60:
br label %set_bool_reg_62
set_bool_reg_62:
%reg6 = phi i1 [1, %true_case_58], [0, %false_case_60]
ret i1 %reg6
statement_65:
br label %true_case_67
true_case_67:
br label %set_bool_reg_71
false_case_69:
br label %set_bool_reg_71
set_bool_reg_71:
%reg7 = phi i1 [1, %true_case_67], [0, %false_case_69]
ret i1 %reg7
br label %func_end_75
func_end_75:
ret i1 0
}
define i1@FALSE(){
%sp = alloca [50 x i32]
br label %statement_81
statement_81:
%reg8 = getelementptr [50 x i32], [50 x i32]* %sp, i32 0, i32 0
store i32 1, i32* %reg8
br label %func_end_86
br label %func_end_86
func_end_86:
ret i1 0
}
define i1@TRUE(){
%sp = alloca [50 x i32]
br label %statement_92
statement_92:
%reg9 = call i1() @FALSE()
br i1 %reg9, label %true_case_95, label %false_case_97
true_case_95:
br label %true_case_99
false_case_97:
br label %false_case_101
true_case_99:
br label %set_bool_reg_103
false_case_101:
br label %set_bool_reg_103
set_bool_reg_103:
%reg10 = phi i32 [1, %true_case_99], [0, %false_case_101]
%reg11 = add i32 0, %reg10
%reg12 = call i1(i32) @NOT(i32 %reg11)
br i1 %reg12, label %true_case_108, label %false_case_110
true_case_108:
br label %true_case_112
false_case_110:
br label %false_case_114
true_case_112:
br label %set_bool_reg_116
false_case_114:
br label %set_bool_reg_116
set_bool_reg_116:
%reg13 = phi i1 [1, %true_case_112], [0, %false_case_114]
ret i1 %reg13
br label %func_end_120
func_end_120:
ret i1 0
}
define i32@foo(){
%sp = alloca [50 x i32]
br label %parse_label_126
parse_label_126:
%reg14 = call i1() @TRUE()
br i1 %reg14, label %true_case_129, label %false_case_131
true_case_129:
br label %true_case_133
false_case_131:
br label %false_case_135
true_case_133:
br label %set_bool_reg_137
false_case_135:
br label %set_bool_reg_137
set_bool_reg_137:
%reg15 = phi i32 [1, %true_case_133], [0, %false_case_135]
%reg16 = add i32 0, %reg15
%reg17 = call i1() @FALSE()
br i1 %reg17, label %true_case_142, label %false_case_144
true_case_142:
br label %true_case_146
false_case_144:
br label %false_case_148
true_case_146:
br label %set_bool_reg_150
false_case_148:
br label %set_bool_reg_150
set_bool_reg_150:
%reg18 = phi i32 [1, %true_case_146], [0, %false_case_148]
%reg19 = add i32 0, %reg18
%reg20 = call i1(i32, i32) @OR(i32 %reg16, i32 %reg19)
br i1 %reg20, label %true_case_155, label %false_case_157
true_case_155:
br label %parse_label_159
false_case_157:
br label %statement_166
parse_label_159:
br label %statement_161
statement_161:
call void(i32) @printi(i32 800)
br label %statement_164
statement_164:
ret i32 800
statement_166:
ret i32 900
br label %func_end_169
func_end_169:
ret i32 0
}
define void@main(){
%sp = alloca [50 x i32]
br label %statement_175
statement_175:
%reg21 = mul i32 878, 10
%reg22 = add i32 %reg21, 7
call void(i32) @printi(i32 %reg22)
br label %statement_180
statement_180:
%reg23 = call i32() @foo()
%reg24 = add i32 0, %reg23
call void(i32) @printi(i32 %reg24)
br label %parse_label_185
parse_label_185:
br label %parse_label_198
parse_label_187:
%reg25 = call i1() @TRUE()
br i1 %reg25, label %true_case_190, label %false_case_192
true_case_190:
br label %statement_194
false_case_192:
br label %parse_label_198
statement_194:
%reg26 = getelementptr [50 x i32], [50 x i32]* %sp, i32 0, i32 0
store i32 1, i32* %reg26
br label %parse_label_198
parse_label_198:
br label %statement_207
parse_label_200:
%reg27 = call i1() @TRUE()
br i1 %reg27, label %true_case_203, label %false_case_205
true_case_203:
br label %statement_207
false_case_205:
br label %func_end_212
statement_207:
%reg28 = getelementptr [50 x i32], [50 x i32]* %sp, i32 0, i32 0
store i32 1, i32* %reg28
br label %func_end_212
br label %func_end_212
func_end_212:
ret void
}
