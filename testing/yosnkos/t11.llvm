declare i32 @printf(i8*, ...)
declare void @exit(i32)
@.int_specifier = constant [4 x i8] c"%d\0A\00"
@.str_specifier = constant [4 x i8] c"%s\0A\00"
define void @printi(i32) {
    %spec_ptr = getelementptr [4 x i8], [4 x i8]* @.int_specifier, i32 0, i32 0
    call i32 (i8*, ...) @printf(i8* %spec_ptr, i32 %0)
    ret void
}
define void @print(i8*) {
    %spec_ptr = getelementptr [4 x i8], [4 x i8]* @.str_specifier, i32 0, i32 0
    call i32 (i8*, ...) @printf(i8* %spec_ptr, i8* %0)
    ret void
}
@.str_div_zero = constant [23 x i8] c"Error division by zero\00"
define void @errorIfZero9001(i32) {
	%cond = icmp eq i32 0, %0
	br i1 %cond, label %exit, label %return
exit:
	%err_str_ptr = getelementptr [23 x i8], [23 x i8]* @.str_div_zero, i32 0, i32 0
	call void(i8*) @print(i8* %err_str_ptr)
	call void(i32) @exit(i32 1)
	br label %return
return:
	ret void
}
define void@hello(i32, i32){
%sp = alloca [50 x i32]
br label %statement_3
statement_3:
ret void
br label %func_end_6
func_end_6:
ret void
}
define i1@OR(i32, i32){
%sp = alloca [50 x i32]
br label %parse_label_12
parse_label_12:
%reg1 = trunc i32 %0 to i1
br i1 %reg1, label %true_case_15, label %false_case_17
true_case_15:
br label %statement_19
false_case_17:
br label %statement_28
statement_19:
br label %true_case_21
true_case_21:
br label %set_bool_reg_25
false_case_23:
br label %set_bool_reg_25
set_bool_reg_25:
%reg2 = phi i1 [1, %true_case_21], [0, %false_case_23]
ret i1 %reg2
statement_28:
%reg3 = trunc i32 %1 to i1
br i1 %reg3, label %true_case_31, label %false_case_33
true_case_31:
br label %true_case_35
false_case_33:
br label %false_case_37
true_case_35:
br label %set_bool_reg_39
false_case_37:
br label %set_bool_reg_39
set_bool_reg_39:
%reg4 = phi i1 [1, %true_case_35], [0, %false_case_37]
ret i1 %reg4
br label %func_end_43
func_end_43:
ret i1 0
}
define i1@NOT(i32){
%sp = alloca [50 x i32]
br label %parse_label_49
parse_label_49:
%reg5 = trunc i32 %0 to i1
br i1 %reg5, label %true_case_52, label %false_case_54
true_case_52:
br label %statement_56
false_case_54:
br label %statement_65
statement_56:
br label %false_case_60
true_case_58:
br label %set_bool_reg_62
false_case_60:
br label %set_bool_reg_62
set_bool_reg_62:
%reg6 = phi i1 [1, %true_case_58], [0, %false_case_60]
ret i1 %reg6
statement_65:
br label %true_case_67
true_case_67:
br label %set_bool_reg_71
false_case_69:
br label %set_bool_reg_71
set_bool_reg_71:
%reg7 = phi i1 [1, %true_case_67], [0, %false_case_69]
ret i1 %reg7
br label %func_end_75
func_end_75:
ret i1 0
}
define i1@FALSE(){
%sp = alloca [50 x i32]
br label %statement_81
statement_81:
%raw_reg8 = zext i8  1 to i32
%reg9 = getelementptr [50 x i32], [50 x i32]* %sp, i32 0, i32 0
store i32 %raw_reg8, i32* %reg9
br label %func_end_87
br label %func_end_87
func_end_87:
ret i1 0
}
define i1@TRUE(){
%sp = alloca [50 x i32]
br label %statement_93
statement_93:
%reg10 = call i1() @FALSE()
br i1 %reg10, label %true_case_96, label %false_case_98
true_case_96:
br label %true_case_100
false_case_98:
br label %false_case_102
true_case_100:
br label %set_bool_reg_104
false_case_102:
br label %set_bool_reg_104
set_bool_reg_104:
%reg11 = phi i32 [1, %true_case_100], [0, %false_case_102]
%reg12 = add i32 0, %reg11
%reg13 = call i1(i32) @NOT(i32 %reg12)
br i1 %reg13, label %true_case_109, label %false_case_111
true_case_109:
br label %true_case_113
false_case_111:
br label %false_case_115
true_case_113:
br label %set_bool_reg_117
false_case_115:
br label %set_bool_reg_117
set_bool_reg_117:
%reg14 = phi i1 [1, %true_case_113], [0, %false_case_115]
ret i1 %reg14
br label %func_end_121
func_end_121:
ret i1 0
}
define i32@foo(){
%sp = alloca [50 x i32]
br label %parse_label_127
parse_label_127:
%reg15 = call i1() @TRUE()
br i1 %reg15, label %true_case_130, label %false_case_132
true_case_130:
br label %true_case_134
false_case_132:
br label %false_case_136
true_case_134:
br label %set_bool_reg_138
false_case_136:
br label %set_bool_reg_138
set_bool_reg_138:
%reg16 = phi i32 [1, %true_case_134], [0, %false_case_136]
%reg17 = add i32 0, %reg16
%reg18 = call i1() @FALSE()
br i1 %reg18, label %true_case_143, label %false_case_145
true_case_143:
br label %true_case_147
false_case_145:
br label %false_case_149
true_case_147:
br label %set_bool_reg_151
false_case_149:
br label %set_bool_reg_151
set_bool_reg_151:
%reg19 = phi i32 [1, %true_case_147], [0, %false_case_149]
%reg20 = add i32 0, %reg19
%reg21 = call i1(i32, i32) @OR(i32 %reg17, i32 %reg20)
br i1 %reg21, label %true_case_156, label %false_case_158
true_case_156:
br label %parse_label_160
false_case_158:
br label %statement_167
parse_label_160:
br label %statement_162
statement_162:
call void(i32) @printi(i32  800)
br label %statement_165
statement_165:
ret i32 800
statement_167:
ret i32 900
br label %func_end_170
func_end_170:
ret i32 0
}
define void@main(){
%sp = alloca [50 x i32]
br label %statement_176
statement_176:
%reg22 = mul i32  878,  10
%reg23 = add i32 %reg22,  7
call void(i32) @printi(i32 %reg23)
br label %statement_181
statement_181:
%reg24 = call i32() @foo()
%reg25 = add i32 0, %reg24
call void(i32) @printi(i32 %reg25)
br label %parse_label_186
parse_label_186:
br label %parse_label_199
parse_label_188:
%reg26 = call i1() @TRUE()
br i1 %reg26, label %true_case_191, label %false_case_193
true_case_191:
br label %statement_195
false_case_193:
br label %parse_label_199
statement_195:
%reg27 = getelementptr [50 x i32], [50 x i32]* %sp, i32 0, i32 0
store i32  1, i32* %reg27
br label %parse_label_199
parse_label_199:
br label %statement_208
parse_label_201:
%reg28 = call i1() @TRUE()
br i1 %reg28, label %true_case_204, label %false_case_206
true_case_204:
br label %statement_208
false_case_206:
br label %func_end_213
statement_208:
%reg29 = getelementptr [50 x i32], [50 x i32]* %sp, i32 0, i32 0
store i32  1, i32* %reg29
br label %func_end_213
br label %func_end_213
func_end_213:
ret void
}
