declare i32 @printf(i8*, ...)
declare void @exit(i32)
@.int_specifier = constant [4 x i8] c"%d\0A\00"
@.str_specifier = constant [4 x i8] c"%s\0A\00"
define void @printi(i32) {
    %spec_ptr = getelementptr [4 x i8], [4 x i8]* @.int_specifier, i32 0, i32 0
    call i32 (i8*, ...) @printf(i8* %spec_ptr, i32 %0)
    ret void
}
define void @print(i8*) {
    %spec_ptr = getelementptr [4 x i8], [4 x i8]* @.str_specifier, i32 0, i32 0
    call i32 (i8*, ...) @printf(i8* %spec_ptr, i8* %0)
    ret void
}
@.str_div_zero = constant [23 x i8] c"Error division by zero\00"
define void @errorIfZero9001(i32) {
	%cond = icmp eq i32 0, %0
	br i1 %cond, label %exit, label %return
exit:
	%err_str_ptr = getelementptr [23 x i8], [23 x i8]* @.str_div_zero, i32 0, i32 0
	call void(i8*) @print(i8* %err_str_ptr)
	call void(i32) @exit(i32 1)
	br label %return
return:
	ret void
}
define i32@ex(i32, i32, i32){
%sp = alloca [50 x i32]
br label %parse_label_3
parse_label_3:
%reg1 = add i32 0, %1
%reg2 = add i32 0, %0
%reg3 = icmp slt i32 %reg1, %reg2
br i1 %reg3, label %statement_8, label %statement_30
statement_8:
%reg4 = add i32 0, %0
%reg5 = sub i32 %reg4, 1
%reg6 = add i32 0, %1
%reg7 = add i32 0, %2
%reg8 = call i32(i32, i32, i32) @ex(i32 %reg5, i32 %reg6, i32 %reg7)
%reg9 = add i32 0, %reg8
%reg10 = add i32 0, %1
%reg11 = sub i32 %reg10, 1
%reg12 = add i32 0, %2
%reg13 = add i32 0, %0
%reg14 = call i32(i32, i32, i32) @ex(i32 %reg11, i32 %reg12, i32 %reg13)
%reg15 = add i32 0, %reg14
%reg16 = add i32 0, %2
%reg17 = sub i32 %reg16, 1
%reg18 = add i32 0, %0
%reg19 = add i32 0, %1
%reg20 = call i32(i32, i32, i32) @ex(i32 %reg17, i32 %reg18, i32 %reg19)
%reg21 = add i32 0, %reg20
%reg22 = call i32(i32, i32, i32) @ex(i32 %reg9, i32 %reg15, i32 %reg21)
%reg23 = add i32 0, %reg22
ret i32 %reg23
statement_30:
%reg24 = add i32 0, %2
ret i32 %reg24
br label %func_end_34
func_end_34:
ret i32 0
}
define i32@f(i32){
%sp = alloca [50 x i32]
br label %statement_40
statement_40:
%reg25 = add i32 0, %0
%reg26 = mul i32 %reg25, 2
ret i32 %reg26
br label %func_end_45
func_end_45:
ret i32 0
}
define void@main(){
%sp = alloca [50 x i32]
br label %statement_51
statement_51:
%reg27 = call i32(i32, i32, i32) @ex(i32 14, i32 13, i32 12)
%reg28 = add i32 0, %reg27
call void(i32) @printi(i32 %reg28)
br label %statement_56
statement_56:
%reg29 = call i32(i32, i32, i32) @ex(i32 18, i32 12, i32 6)
%reg30 = add i32 0, %reg29
call void(i32) @printi(i32 %reg30)
br label %statement_61
statement_61:
%reg31 = call i32(i32, i32, i32) @ex(i32 19, i32 15, i32 10)
%reg32 = add i32 0, %reg31
call void(i32) @printi(i32 %reg32)
br label %func_end_67
br label %func_end_67
func_end_67:
ret void
}
