declare i32 @printf(i8*, ...)
declare void @exit(i32)
@.int_specifier = constant [4 x i8] c"%d\0A\00"
@.str_specifier = constant [4 x i8] c"%s\0A\00"
define void @printi(i32) {
    %spec_ptr = getelementptr [4 x i8], [4 x i8]* @.int_specifier, i32 0, i32 0
    call i32 (i8*, ...) @printf(i8* %spec_ptr, i32 %0)
    ret void
}
define void @print(i8*) {
    %spec_ptr = getelementptr [4 x i8], [4 x i8]* @.str_specifier, i32 0, i32 0
    call i32 (i8*, ...) @printf(i8* %spec_ptr, i8* %0)
    ret void
}
@.str_div_zero = constant [23 x i8] c"Error division by zero\00"
define void @errorIfZero9001(i32) {
	%cond = icmp eq i32 0, %0
	br i1 %cond, label %exit, label %return
exit:
	%err_str_ptr = getelementptr [23 x i8], [23 x i8]* @.str_div_zero, i32 0, i32 0
	call void(i8*) @print(i8* %err_str_ptr)
	call void(i32) @exit(i32 1)
	br label %return
return:
	ret void
}
@.string_id0 = constant [14 x i8] c"in first loop\00"
@.string_id1 = constant [15 x i8] c"in second loop\00"
@.string_id2 = constant [18 x i8] c"break second loop\00"
@.string_id3 = constant [25 x i8] c"second loop didn't break\00"
@.string_id4 = constant [17 x i8] c"break first loop\00"
@.string_id5 = constant [24 x i8] c"first loop didn't break\00"
@.string_id6 = constant [8 x i8] c"bye bye\00"
define void@main(){
%sp = alloca [50 x i32]
br label %statement_3
statement_3:
%reg1 = getelementptr [50 x i32], [50 x i32]* %sp, i32 0, i32 0
store i32 5, i32* %reg1
br label %statement_7
statement_7:
%reg2 = getelementptr [50 x i32], [50 x i32]* %sp, i32 0, i32 1
store i32 4, i32* %reg2
br label %statement_11
statement_11:
br label %true_case_13
true_case_13:
br label %set_bool_reg_17
false_case_15:
br label %set_bool_reg_17
set_bool_reg_17:
%reg3 = phi i32 [1, %true_case_13], [0, %false_case_15]
%reg4 = getelementptr [50 x i32], [50 x i32]* %sp, i32 0, i32 2
store i32 %reg3, i32* %reg4
br label %cond_22
cond_22:
%param_ptr5 = getelementptr [50 x i32], [50 x i32]* %sp, i32 0, i32 0
%param_raw6 = load i32, i32* %param_ptr5
%reg7 = add i32 0, %param_raw6
%reg8 = icmp slt i32 %reg7, 10
br i1 %reg8, label %statement_28, label %statement_156
statement_28:
%str_ptr_reg9 = getelementptr [14 x i8], [14 x i8]* @.string_id0, i32 0, i32 0
call void(i8*) @print(i8* %str_ptr_reg9)
br label %statement_32
statement_32:
%param_ptr10 = getelementptr [50 x i32], [50 x i32]* %sp, i32 0, i32 0
%param_raw11 = load i32, i32* %param_ptr10
%reg12 = add i32 0, %param_raw11
call void(i32) @printi(i32 %reg12)
br label %cond_38
cond_38:
%param_ptr13 = getelementptr [50 x i32], [50 x i32]* %sp, i32 0, i32 1
%param_raw14 = load i32, i32* %param_ptr13
%truncated_byte15 = trunc i32 %param_raw14 to i8
%reg16 = add i8 0, %truncated_byte15
%reg17 = icmp ult i8 %reg16, 6
br i1 %reg17, label %statement_45, label %parse_label_101
statement_45:
%str_ptr_reg18 = getelementptr [15 x i8], [15 x i8]* @.string_id1, i32 0, i32 0
call void(i8*) @print(i8* %str_ptr_reg18)
br label %statement_49
statement_49:
%param_ptr19 = getelementptr [50 x i32], [50 x i32]* %sp, i32 0, i32 1
%param_raw20 = load i32, i32* %param_ptr19
%truncated_byte21 = trunc i32 %param_raw20 to i8
%reg22 = add i8 0, %truncated_byte21
%raw_reg23 = zext i8 %reg22 to i32
call void(i32) @printi(i32 %raw_reg23)
br label %parse_label_57
parse_label_57:
%param_ptr24 = getelementptr [50 x i32], [50 x i32]* %sp, i32 0, i32 1
%param_raw25 = load i32, i32* %param_ptr24
%truncated_byte26 = trunc i32 %param_raw25 to i8
%reg27 = add i8 0, %truncated_byte26
%b2int_conv_reg28 = zext i8 %reg27 to i32
%reg29 = icmp eq i32 %b2int_conv_reg28, 5
br i1 %reg29, label %statement_65, label %statement_79
statement_65:
%str_ptr_reg30 = getelementptr [18 x i8], [18 x i8]* @.string_id2, i32 0, i32 0
call void(i8*) @print(i8* %str_ptr_reg30)
br label %statement_69
statement_69:
%param_ptr31 = getelementptr [50 x i32], [50 x i32]* %sp, i32 0, i32 1
%param_raw32 = load i32, i32* %param_ptr31
%truncated_byte33 = trunc i32 %param_raw32 to i8
%reg34 = add i8 0, %truncated_byte33
%raw_reg35 = zext i8 %reg34 to i32
call void(i32) @printi(i32 %raw_reg35)
br label %statement_77
statement_77:
br label %parse_label_101
statement_79:
%str_ptr_reg36 = getelementptr [25 x i8], [25 x i8]* @.string_id3, i32 0, i32 0
call void(i8*) @print(i8* %str_ptr_reg36)
br label %statement_83
statement_83:
%param_ptr37 = getelementptr [50 x i32], [50 x i32]* %sp, i32 0, i32 1
%param_raw38 = load i32, i32* %param_ptr37
%truncated_byte39 = trunc i32 %param_raw38 to i8
%reg40 = add i8 0, %truncated_byte39
%raw_reg41 = zext i8 %reg40 to i32
call void(i32) @printi(i32 %raw_reg41)
br label %statement_91
statement_91:
%param_ptr42 = getelementptr [50 x i32], [50 x i32]* %sp, i32 0, i32 1
%param_raw43 = load i32, i32* %param_ptr42
%truncated_byte44 = trunc i32 %param_raw43 to i8
%reg45 = add i8 0, %truncated_byte44
%reg46 = add i8 %reg45, 1
%raw_reg47 = zext i8 %reg46 to i32
%reg48 = getelementptr [50 x i32], [50 x i32]* %sp, i32 0, i32 1
store i32 %raw_reg47, i32* %reg48
br label %cond_38
parse_label_101:
%param_ptr49 = getelementptr [50 x i32], [50 x i32]* %sp, i32 0, i32 2
%param_raw50 = load i32, i32* %param_ptr49
%reg51 = trunc i32 %param_raw50 to i1
br i1 %reg51, label %true_case_106, label %false_case_108
true_case_106:
br label %parse_label_110
false_case_108:
br label %statement_116
parse_label_110:
%param_ptr52 = getelementptr [50 x i32], [50 x i32]* %sp, i32 0, i32 0
%param_raw53 = load i32, i32* %param_ptr52
%reg54 = add i32 0, %param_raw53
%reg55 = icmp sgt i32 %reg54, 7
br i1 %reg55, label %statement_116, label %statement_128
statement_116:
%str_ptr_reg56 = getelementptr [17 x i8], [17 x i8]* @.string_id4, i32 0, i32 0
call void(i8*) @print(i8* %str_ptr_reg56)
br label %statement_120
statement_120:
%param_ptr57 = getelementptr [50 x i32], [50 x i32]* %sp, i32 0, i32 0
%param_raw58 = load i32, i32* %param_ptr57
%reg59 = add i32 0, %param_raw58
call void(i32) @printi(i32 %reg59)
br label %statement_126
statement_126:
br label %statement_156
statement_128:
%str_ptr_reg60 = getelementptr [24 x i8], [24 x i8]* @.string_id5, i32 0, i32 0
call void(i8*) @print(i8* %str_ptr_reg60)
br label %statement_132
statement_132:
%param_ptr61 = getelementptr [50 x i32], [50 x i32]* %sp, i32 0, i32 0
%param_raw62 = load i32, i32* %param_ptr61
%reg63 = add i32 0, %param_raw62
call void(i32) @printi(i32 %reg63)
br label %statement_138
statement_138:
%param_ptr64 = getelementptr [50 x i32], [50 x i32]* %sp, i32 0, i32 0
%param_raw65 = load i32, i32* %param_ptr64
%reg66 = add i32 0, %param_raw65
%reg67 = add i32 %reg66, 1
%reg68 = getelementptr [50 x i32], [50 x i32]* %sp, i32 0, i32 0
store i32 %reg67, i32* %reg68
br label %statement_146
statement_146:
%param_ptr69 = getelementptr [50 x i32], [50 x i32]* %sp, i32 0, i32 1
%param_raw70 = load i32, i32* %param_ptr69
%truncated_byte71 = trunc i32 %param_raw70 to i8
%reg72 = add i8 0, %truncated_byte71
%reg73 = sub i8 %reg72, 1
%raw_reg74 = zext i8 %reg73 to i32
%reg75 = getelementptr [50 x i32], [50 x i32]* %sp, i32 0, i32 1
store i32 %raw_reg74, i32* %reg75
br label %cond_22
statement_156:
%str_ptr_reg76 = getelementptr [8 x i8], [8 x i8]* @.string_id6, i32 0, i32 0
call void(i8*) @print(i8* %str_ptr_reg76)
br label %func_end_161
br label %func_end_161
func_end_161:
ret void
}
