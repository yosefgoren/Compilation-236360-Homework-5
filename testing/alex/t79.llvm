declare i32 @printf(i8*, ...)
declare void @exit(i32)
@.int_specifier = constant [4 x i8] c"%d\0A\00"
@.str_specifier = constant [4 x i8] c"%s\0A\00"
define void @printi(i32) {
    %spec_ptr = getelementptr [4 x i8], [4 x i8]* @.int_specifier, i32 0, i32 0
    call i32 (i8*, ...) @printf(i8* %spec_ptr, i32 %0)
    ret void
}
define void @print(i8*) {
    %spec_ptr = getelementptr [4 x i8], [4 x i8]* @.str_specifier, i32 0, i32 0
    call i32 (i8*, ...) @printf(i8* %spec_ptr, i8* %0)
    ret void
}
@.str_div_zero = constant [23 x i8] c"Error division by zero\00"
define void @errorIfZero9001(i32) {
	%cond = icmp eq i32 0, %0
	br i1 %cond, label %exit, label %return
exit:
	%err_str_ptr = getelementptr [23 x i8], [23 x i8]* @.str_div_zero, i32 0, i32 0
	call void(i8*) @print(i8* %err_str_ptr)
	call void(i32) @exit(i32 1)
	br label %return
return:
	ret void
}
define void@main(){
%sp = alloca [50 x i32]
br label %statement_3
statement_3:
%reg1 = getelementptr [50 x i32], [50 x i32]* %sp, i32 0, i32 0
store i32  2045, i32* %reg1
br label %statement_7
statement_7:
%param_ptr2 = getelementptr [50 x i32], [50 x i32]* %sp, i32 0, i32 0
%param_raw3 = load i32, i32* %param_ptr2
%reg4 = add i32 0, %param_raw3
call void(i32) @printi(i32 %reg4)
br label %statement_13
statement_13:
%param_ptr5 = getelementptr [50 x i32], [50 x i32]* %sp, i32 0, i32 0
%param_raw6 = load i32, i32* %param_ptr5
%reg7 = add i32 0, %param_raw6
%int2byte_conv_reg8 = trunc i32 %reg7 to i8
%raw_reg9 = zext i8 %int2byte_conv_reg8 to i32
call void(i32) @printi(i32 %raw_reg9)
br label %statement_21
statement_21:
ret void
br label %func_end_24
func_end_24:
ret void
}
