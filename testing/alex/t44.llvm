declare i32 @printf(i8*, ...)
declare void @exit(i32)
@.int_specifier = constant [4 x i8] c"%d\0A\00"
@.str_specifier = constant [4 x i8] c"%s\0A\00"
define void @printi(i32) {
    %spec_ptr = getelementptr [4 x i8], [4 x i8]* @.int_specifier, i32 0, i32 0
    call i32 (i8*, ...) @printf(i8* %spec_ptr, i32 %0)
    ret void
}
define void @print(i8*) {
    %spec_ptr = getelementptr [4 x i8], [4 x i8]* @.str_specifier, i32 0, i32 0
    call i32 (i8*, ...) @printf(i8* %spec_ptr, i8* %0)
    ret void
}
@.str_div_zero = constant [23 x i8] c"Error division by zero\00"
define void @errorIfZero9001(i32) {
	%cond = icmp eq i32 0, %0
	br i1 %cond, label %exit, label %return
exit:
	%err_str_ptr = getelementptr [23 x i8], [23 x i8]* @.str_div_zero, i32 0, i32 0
	call void(i8*) @print(i8* %err_str_ptr)
	call void(i32) @exit(i32 1)
	br label %return
return:
	ret void
}
@.string_id0 = constant [8 x i8] c"Res is \00"
define void@main(){
%sp = alloca [50 x i32]
br label %statement_3
statement_3:
%reg1 = getelementptr [50 x i32], [50 x i32]* %sp, i32 0, i32 0
store i32 2, i32* %reg1
br label %statement_7
statement_7:
%reg2 = getelementptr [50 x i32], [50 x i32]* %sp, i32 0, i32 1
store i32 0, i32* %reg2
br label %cond_11
cond_11:
%param_ptr3 = getelementptr [50 x i32], [50 x i32]* %sp, i32 0, i32 0
%param_raw4 = load i32, i32* %param_ptr3
%reg5 = add i32 0, %param_raw4
%reg6 = icmp sgt i32 %reg5, 0
br i1 %reg6, label %statement_17, label %statement_73
statement_17:
%reg7 = getelementptr [50 x i32], [50 x i32]* %sp, i32 0, i32 2
store i32 5, i32* %reg7
br label %statement_21
statement_21:
%reg8 = getelementptr [50 x i32], [50 x i32]* %sp, i32 0, i32 3
store i32 1, i32* %reg8
br label %cond_25
cond_25:
br label %statement_27
statement_27:
%param_ptr9 = getelementptr [50 x i32], [50 x i32]* %sp, i32 0, i32 3
%param_raw10 = load i32, i32* %param_ptr9
%reg11 = add i32 0, %param_raw10
%param_ptr12 = getelementptr [50 x i32], [50 x i32]* %sp, i32 0, i32 2
%param_raw13 = load i32, i32* %param_ptr12
%reg14 = add i32 0, %param_raw13
%reg15 = mul i32 %reg11, %reg14
%reg16 = getelementptr [50 x i32], [50 x i32]* %sp, i32 0, i32 3
store i32 %reg15, i32* %reg16
br label %statement_38
statement_38:
%param_ptr17 = getelementptr [50 x i32], [50 x i32]* %sp, i32 0, i32 2
%param_raw18 = load i32, i32* %param_ptr17
%reg19 = add i32 0, %param_raw18
%reg20 = sub i32 %reg19, 1
%reg21 = getelementptr [50 x i32], [50 x i32]* %sp, i32 0, i32 2
store i32 %reg20, i32* %reg21
br label %parse_label_46
parse_label_46:
%param_ptr22 = getelementptr [50 x i32], [50 x i32]* %sp, i32 0, i32 2
%param_raw23 = load i32, i32* %param_ptr22
%reg24 = add i32 0, %param_raw23
%reg25 = icmp eq i32 %reg24, 1
br i1 %reg25, label %statement_52, label %cond_25
statement_52:
br label %statement_54
statement_54:
%param_ptr26 = getelementptr [50 x i32], [50 x i32]* %sp, i32 0, i32 0
%param_raw27 = load i32, i32* %param_ptr26
%reg28 = add i32 0, %param_raw27
%reg29 = sub i32 %reg28, 1
%reg30 = getelementptr [50 x i32], [50 x i32]* %sp, i32 0, i32 0
store i32 %reg29, i32* %reg30
br label %statement_62
statement_62:
%param_ptr31 = getelementptr [50 x i32], [50 x i32]* %sp, i32 0, i32 1
%param_raw32 = load i32, i32* %param_ptr31
%reg33 = add i32 0, %param_raw32
%param_ptr34 = getelementptr [50 x i32], [50 x i32]* %sp, i32 0, i32 3
%param_raw35 = load i32, i32* %param_ptr34
%reg36 = add i32 0, %param_raw35
%reg37 = add i32 %reg33, %reg36
%reg38 = getelementptr [50 x i32], [50 x i32]* %sp, i32 0, i32 1
store i32 %reg37, i32* %reg38
br label %cond_11
statement_73:
%str_ptr_reg39 = getelementptr [8 x i8], [8 x i8]* @.string_id0, i32 0, i32 0
call void(i8*) @print(i8* %str_ptr_reg39)
br label %statement_77
statement_77:
%param_ptr40 = getelementptr [50 x i32], [50 x i32]* %sp, i32 0, i32 1
%param_raw41 = load i32, i32* %param_ptr40
%reg42 = add i32 0, %param_raw41
call void(i32) @printi(i32 %reg42)
br label %func_end_84
br label %func_end_84
func_end_84:
ret void
}
