declare i32 @printf(i8*, ...)
declare void @exit(i32)
@.int_specifier = constant [4 x i8] c"%d\0A\00"
@.str_specifier = constant [4 x i8] c"%s\0A\00"
define void @printi(i32) {
    %spec_ptr = getelementptr [4 x i8], [4 x i8]* @.int_specifier, i32 0, i32 0
    call i32 (i8*, ...) @printf(i8* %spec_ptr, i32 %0)
    ret void
}
define void @print(i8*) {
    %spec_ptr = getelementptr [4 x i8], [4 x i8]* @.str_specifier, i32 0, i32 0
    call i32 (i8*, ...) @printf(i8* %spec_ptr, i8* %0)
    ret void
}
@.str_div_zero = constant [23 x i8] c"Error division by zero\00"
define void @errorIfZero9001(i32) {
	%cond = icmp eq i32 0, %0
	br i1 %cond, label %exit, label %return
exit:
	%err_str_ptr = getelementptr [23 x i8], [23 x i8]* @.str_div_zero, i32 0, i32 0
	call void(i8*) @print(i8* %err_str_ptr)
	call void(i32) @exit(i32 1)
	br label %return
return:
	ret void
}
@.string_id0 = constant [21 x i8] c"This shouldn't print\00"
@.string_id1 = constant [18 x i8] c"This should print\00"
@.string_id2 = constant [8 x i8] c"Success\00"
@.string_id3 = constant [10 x i8] c"Failure 1\00"
@.string_id4 = constant [10 x i8] c"Failure 2\00"
define i1@f(){
%sp = alloca [50 x i32]
br label %statement_3
statement_3:
%str_ptr_reg1 = getelementptr [21 x i8], [21 x i8]* @.string_id0, i32 0, i32 0
call void(i8*) @print(i8* %str_ptr_reg1)
br label %statement_7
statement_7:
br label %true_case_9
true_case_9:
br label %set_bool_reg_13
false_case_11:
br label %set_bool_reg_13
set_bool_reg_13:
%reg2 = phi i1 [1, %true_case_9], [0, %false_case_11]
ret i1 %reg2
br label %func_end_17
func_end_17:
ret i1 0
}
define i1@g(){
%sp = alloca [50 x i32]
br label %statement_23
statement_23:
%str_ptr_reg3 = getelementptr [18 x i8], [18 x i8]* @.string_id1, i32 0, i32 0
call void(i8*) @print(i8* %str_ptr_reg3)
br label %statement_27
statement_27:
br label %true_case_29
true_case_29:
br label %set_bool_reg_33
false_case_31:
br label %set_bool_reg_33
set_bool_reg_33:
%reg4 = phi i1 [1, %true_case_29], [0, %false_case_31]
ret i1 %reg4
br label %func_end_37
func_end_37:
ret i1 0
}
define void@main(){
%sp = alloca [50 x i32]
br label %statement_43
statement_43:
%reg5 = icmp sgt i32 5, 4
br i1 %reg5, label %parse_label_46, label %false_case_51
parse_label_46:
%reg6 = icmp sgt i32 3, 2
br i1 %reg6, label %true_case_49, label %false_case_51
true_case_49:
br label %set_bool_reg_53
false_case_51:
br label %set_bool_reg_53
set_bool_reg_53:
%reg7 = phi i32 [1, %true_case_49], [0, %false_case_51]
%reg8 = getelementptr [50 x i32], [50 x i32]* %sp, i32 0, i32 0
store i32 %reg7, i32* %reg8
br label %parse_label_58
parse_label_58:
%param_ptr9 = getelementptr [50 x i32], [50 x i32]* %sp, i32 0, i32 0
%param_raw10 = load i32, i32* %param_ptr9
%reg11 = trunc i32 %param_raw10 to i1
br i1 %reg11, label %true_case_63, label %false_case_65
true_case_63:
br label %parse_label_67
false_case_65:
br label %parse_label_74
parse_label_67:
%reg12 = call i1() @g()
br i1 %reg12, label %true_case_70, label %false_case_72
true_case_70:
br label %statement_81
false_case_72:
br label %parse_label_74
parse_label_74:
%reg13 = call i1() @f()
br i1 %reg13, label %true_case_77, label %false_case_79
true_case_77:
br label %statement_81
false_case_79:
br label %statement_87
statement_81:
%str_ptr_reg14 = getelementptr [8 x i8], [8 x i8]* @.string_id2, i32 0, i32 0
call void(i8*) @print(i8* %str_ptr_reg14)
br label %statement_85
statement_85:
ret void
statement_87:
%str_ptr_reg15 = getelementptr [10 x i8], [10 x i8]* @.string_id3, i32 0, i32 0
call void(i8*) @print(i8* %str_ptr_reg15)
br label %statement_91
statement_91:
%str_ptr_reg16 = getelementptr [10 x i8], [10 x i8]* @.string_id4, i32 0, i32 0
call void(i8*) @print(i8* %str_ptr_reg16)
br label %func_end_96
br label %func_end_96
func_end_96:
ret void
}
