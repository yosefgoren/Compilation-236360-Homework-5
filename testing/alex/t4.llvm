declare i32 @printf(i8*, ...)
declare void @exit(i32)
@.int_specifier = constant [4 x i8] c"%d\0A\00"
@.str_specifier = constant [4 x i8] c"%s\0A\00"
define void @printi(i32) {
    %spec_ptr = getelementptr [4 x i8], [4 x i8]* @.int_specifier, i32 0, i32 0
    call i32 (i8*, ...) @printf(i8* %spec_ptr, i32 %0)
    ret void
}
define void @print(i8*) {
    %spec_ptr = getelementptr [4 x i8], [4 x i8]* @.str_specifier, i32 0, i32 0
    call i32 (i8*, ...) @printf(i8* %spec_ptr, i8* %0)
    ret void
}
@.str_div_zero = constant [23 x i8] c"Error division by zero\00"
define void @errorIfZero9001(i32) {
	%cond = icmp eq i32 0, %0
	br i1 %cond, label %exit, label %return
exit:
	%err_str_ptr = getelementptr [23 x i8], [23 x i8]* @.str_div_zero, i32 0, i32 0
	call void(i8*) @print(i8* %err_str_ptr)
	call void(i32) @exit(i32 1)
	br label %return
return:
	ret void
}
@.string_id0 = constant [4 x i8] c"a>3\00"
@.string_id1 = constant [10 x i8] c"correct_3\00"
@.string_id2 = constant [4 x i8] c"a>4\00"
@.string_id3 = constant [10 x i8] c"correct_2\00"
@.string_id4 = constant [4 x i8] c"a>5\00"
@.string_id5 = constant [10 x i8] c"correct_1\00"
define i32@func3(i32){
%sp = alloca [50 x i32]
br label %parse_label_3
parse_label_3:
%reg1 = add i32 0, %0
%reg2 = icmp sgt i32 %reg1, 3
br i1 %reg2, label %statement_7, label %statement_13
statement_7:
%str_ptr_reg3 = getelementptr [4 x i8], [4 x i8]* @.string_id0, i32 0, i32 0
call void(i8*) @print(i8* %str_ptr_reg3)
br label %statement_11
statement_11:
ret i32 32
statement_13:
%str_ptr_reg4 = getelementptr [10 x i8], [10 x i8]* @.string_id1, i32 0, i32 0
call void(i8*) @print(i8* %str_ptr_reg4)
br label %statement_17
statement_17:
ret i32 22
br label %func_end_20
func_end_20:
ret i32 0
}
define i32@func2(i32){
%sp = alloca [50 x i32]
br label %parse_label_26
parse_label_26:
%reg5 = add i32 0, %0
%reg6 = icmp sgt i32 %reg5, 4
br i1 %reg6, label %statement_30, label %statement_36
statement_30:
%str_ptr_reg7 = getelementptr [4 x i8], [4 x i8]* @.string_id2, i32 0, i32 0
call void(i8*) @print(i8* %str_ptr_reg7)
br label %statement_34
statement_34:
ret i32 13
statement_36:
%str_ptr_reg8 = getelementptr [10 x i8], [10 x i8]* @.string_id3, i32 0, i32 0
call void(i8*) @print(i8* %str_ptr_reg8)
br label %statement_40
statement_40:
ret i32 12
br label %func_end_43
func_end_43:
ret i32 0
}
define i32@func1(i32){
%sp = alloca [50 x i32]
br label %parse_label_49
parse_label_49:
%reg9 = add i32 0, %0
%reg10 = icmp sgt i32 %reg9, 15
br i1 %reg10, label %statement_53, label %statement_59
statement_53:
%str_ptr_reg11 = getelementptr [4 x i8], [4 x i8]* @.string_id4, i32 0, i32 0
call void(i8*) @print(i8* %str_ptr_reg11)
br label %statement_57
statement_57:
ret i32 3
statement_59:
%str_ptr_reg12 = getelementptr [10 x i8], [10 x i8]* @.string_id5, i32 0, i32 0
call void(i8*) @print(i8* %str_ptr_reg12)
br label %statement_63
statement_63:
%reg13 = add i32 0, %0
%reg14 = mul i32 2, %reg13
ret i32 %reg14
br label %func_end_68
func_end_68:
ret i32 0
}
define void@main(){
%sp = alloca [50 x i32]
br label %statement_74
statement_74:
%reg15 = call i32(i32) @func3(i32 4)
%reg16 = add i32 0, %reg15
%reg17 = call i32(i32) @func2(i32 %reg16)
%reg18 = add i32 0, %reg17
%reg19 = call i32(i32) @func1(i32 %reg18)
%reg20 = add i32 0, %reg19
call void(i32) @printi(i32 %reg20)
br label %func_end_84
br label %func_end_84
func_end_84:
ret void
}
