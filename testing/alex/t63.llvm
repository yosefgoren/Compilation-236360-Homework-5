declare i32 @printf(i8*, ...)
declare void @exit(i32)
@.int_specifier = constant [4 x i8] c"%d\0A\00"
@.str_specifier = constant [4 x i8] c"%s\0A\00"
define void @printi(i32) {
    %spec_ptr = getelementptr [4 x i8], [4 x i8]* @.int_specifier, i32 0, i32 0
    call i32 (i8*, ...) @printf(i8* %spec_ptr, i32 %0)
    ret void
}
define void @print(i8*) {
    %spec_ptr = getelementptr [4 x i8], [4 x i8]* @.str_specifier, i32 0, i32 0
    call i32 (i8*, ...) @printf(i8* %spec_ptr, i8* %0)
    ret void
}
@.str_div_zero = constant [23 x i8] c"Error division by zero\00"
define void @errorIfZero9001(i32) {
	%cond = icmp eq i32 0, %0
	br i1 %cond, label %exit, label %return
exit:
	%err_str_ptr = getelementptr [23 x i8], [23 x i8]* @.str_div_zero, i32 0, i32 0
	call void(i8*) @print(i8* %err_str_ptr)
	call void(i32) @exit(i32 1)
	br label %return
return:
	ret void
}
define i1@func1(i32){
%sp = alloca [50 x i32]
br label %statement_3
statement_3:
%truncated_byte1 = trunc i32 %0 to i8
%reg2 = add i8 0, %truncated_byte1
%b2int_conv_reg3 = zext i8 %reg2 to i32
%reg4 = icmp slt i32 %b2int_conv_reg3,  5
br i1 %reg4, label %true_case_9, label %false_case_11
true_case_9:
br label %set_bool_reg_13
false_case_11:
br label %set_bool_reg_13
set_bool_reg_13:
%reg5 = phi i1 [1, %true_case_9], [0, %false_case_11]
ret i1 %reg5
br label %func_end_17
func_end_17:
ret i1 0
}
define void@main(){
%sp = alloca [50 x i32]
br label %statement_23
statement_23:
%raw_reg6 = zext i8  0 to i32
%reg7 = getelementptr [50 x i32], [50 x i32]* %sp, i32 0, i32 0
store i32 %raw_reg6, i32* %reg7
br label %cond_28
cond_28:
%param_ptr8 = getelementptr [50 x i32], [50 x i32]* %sp, i32 0, i32 0
%param_raw9 = load i32, i32* %param_ptr8
%truncated_byte10 = trunc i32 %param_raw9 to i8
%reg11 = add i8 0, %truncated_byte10
%raw_reg12 = zext i8 %reg11 to i32
%reg13 = call i1(i32) @func1(i32 %raw_reg12)
br i1 %reg13, label %true_case_36, label %false_case_38
true_case_36:
br label %statement_40
false_case_38:
br label %func_end_59
statement_40:
%param_ptr14 = getelementptr [50 x i32], [50 x i32]* %sp, i32 0, i32 0
%param_raw15 = load i32, i32* %param_ptr14
%truncated_byte16 = trunc i32 %param_raw15 to i8
%reg17 = add i8 0, %truncated_byte16
%raw_reg18 = zext i8 %reg17 to i32
call void(i32) @printi(i32 %raw_reg18)
br label %statement_48
statement_48:
%param_ptr19 = getelementptr [50 x i32], [50 x i32]* %sp, i32 0, i32 0
%param_raw20 = load i32, i32* %param_ptr19
%truncated_byte21 = trunc i32 %param_raw20 to i8
%reg22 = add i8 0, %truncated_byte21
%reg23 = add i8 %reg22,  1
%raw_reg24 = zext i8 %reg23 to i32
%reg25 = getelementptr [50 x i32], [50 x i32]* %sp, i32 0, i32 0
store i32 %raw_reg24, i32* %reg25
br label %cond_28
br label %func_end_59
func_end_59:
ret void
}
