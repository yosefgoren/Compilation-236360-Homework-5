declare i32 @printf(i8*, ...)
declare void @exit(i32)
@.int_specifier = constant [4 x i8] c"%d\0A\00"
@.str_specifier = constant [4 x i8] c"%s\0A\00"
define void @printi(i32) {
    %spec_ptr = getelementptr [4 x i8], [4 x i8]* @.int_specifier, i32 0, i32 0
    call i32 (i8*, ...) @printf(i8* %spec_ptr, i32 %0)
    ret void
}
define void @print(i8*) {
    %spec_ptr = getelementptr [4 x i8], [4 x i8]* @.str_specifier, i32 0, i32 0
    call i32 (i8*, ...) @printf(i8* %spec_ptr, i8* %0)
    ret void
}
@.str_div_zero = constant [23 x i8] c"Error division by zero\00"
define void @errorIfZero9001(i32) {
	%cond = icmp eq i32 0, %0
	br i1 %cond, label %exit, label %return
exit:
	%err_str_ptr = getelementptr [23 x i8], [23 x i8]* @.str_div_zero, i32 0, i32 0
	call void(i8*) @print(i8* %err_str_ptr)
	call void(i32) @exit(i32 1)
	br label %return
return:
	ret void
}
@.string_id0 = constant [11 x i8] c"b1 is true\00"
@.string_id1 = constant [12 x i8] c"b2 is false\00"
@.string_id2 = constant [12 x i8] c"b3 is false\00"
@.string_id3 = constant [21 x i8] c"b3 is false after b4\00"
@.string_id4 = constant [9 x i8] c"First If\00"
@.string_id5 = constant [11 x i8] c"First Else\00"
@.string_id6 = constant [10 x i8] c"Second If\00"
@.string_id7 = constant [12 x i8] c"Second Else\00"
@.string_id8 = constant [9 x i8] c"Third If\00"
@.string_id9 = constant [11 x i8] c"Third Else\00"
define i1@f(i32, i32){
%sp = alloca [50 x i32]
br label %statement_3
statement_3:
%reg1 = add i32 0, %0
%reg2 = add i32 0, %1
%reg3 = icmp sgt i32 %reg1, %reg2
br i1 %reg3, label %parse_label_8, label %false_case_14
parse_label_8:
%reg4 = add i32 0, %1
%reg5 = icmp slt i32 %reg4, 100
br i1 %reg5, label %true_case_12, label %false_case_14
true_case_12:
br label %set_bool_reg_16
false_case_14:
br label %set_bool_reg_16
set_bool_reg_16:
%reg6 = phi i1 [1, %true_case_12], [0, %false_case_14]
ret i1 %reg6
br label %func_end_20
func_end_20:
ret i1 0
}
define i1@g(i32, i32){
%sp = alloca [50 x i32]
br label %statement_26
statement_26:
%reg7 = add i32 0, %0
%reg8 = icmp sgt i32 %reg7, 10
br i1 %reg8, label %parse_label_30, label %parse_label_37
parse_label_30:
%reg9 = trunc i32 %1 to i1
br i1 %reg9, label %true_case_33, label %false_case_35
true_case_33:
br label %true_case_48
false_case_35:
br label %parse_label_37
parse_label_37:
%reg10 = add i32 0, %0
%reg11 = icmp sle i32 %reg10, 10
br i1 %reg11, label %parse_label_41, label %false_case_50
parse_label_41:
%reg12 = trunc i32 %1 to i1
br i1 %reg12, label %true_case_44, label %false_case_46
true_case_44:
br label %false_case_50
false_case_46:
br label %true_case_48
true_case_48:
br label %set_bool_reg_52
false_case_50:
br label %set_bool_reg_52
set_bool_reg_52:
%reg13 = phi i1 [1, %true_case_48], [0, %false_case_50]
ret i1 %reg13
br label %func_end_56
func_end_56:
ret i1 0
}
define void@main(){
%sp = alloca [50 x i32]
br label %statement_62
statement_62:
%reg14 = call i1(i32, i32) @f(i32 10, i32 5)
br i1 %reg14, label %true_case_65, label %false_case_67
true_case_65:
br label %true_case_69
false_case_67:
br label %false_case_71
true_case_69:
br label %set_bool_reg_73
false_case_71:
br label %set_bool_reg_73
set_bool_reg_73:
%reg15 = phi i32 [1, %true_case_69], [0, %false_case_71]
%reg16 = getelementptr [50 x i32], [50 x i32]* %sp, i32 0, i32 0
store i32 %reg15, i32* %reg16
br label %parse_label_78
parse_label_78:
%param_ptr17 = getelementptr [50 x i32], [50 x i32]* %sp, i32 0, i32 0
%param_raw18 = load i32, i32* %param_ptr17
%reg19 = trunc i32 %param_raw18 to i1
br i1 %reg19, label %true_case_83, label %false_case_85
true_case_83:
br label %statement_87
false_case_85:
br label %statement_91
statement_87:
%str_ptr_reg20 = getelementptr [11 x i8], [11 x i8]* @.string_id0, i32 0, i32 0
call void(i8*) @print(i8* %str_ptr_reg20)
br label %statement_91
statement_91:
%param_ptr21 = getelementptr [50 x i32], [50 x i32]* %sp, i32 0, i32 0
%param_raw22 = load i32, i32* %param_ptr21
%reg23 = trunc i32 %param_raw22 to i1
br i1 %reg23, label %true_case_96, label %false_case_98
true_case_96:
br label %true_case_100
false_case_98:
br label %false_case_102
true_case_100:
br label %set_bool_reg_104
false_case_102:
br label %set_bool_reg_104
set_bool_reg_104:
%reg24 = phi i32 [1, %true_case_100], [0, %false_case_102]
%reg25 = add i32 0, %reg24
%reg26 = call i1(i32, i32) @g(i32 5, i32 %reg25)
br i1 %reg26, label %true_case_109, label %false_case_111
true_case_109:
br label %true_case_113
false_case_111:
br label %false_case_115
true_case_113:
br label %set_bool_reg_117
false_case_115:
br label %set_bool_reg_117
set_bool_reg_117:
%reg27 = phi i32 [1, %true_case_113], [0, %false_case_115]
%reg28 = getelementptr [50 x i32], [50 x i32]* %sp, i32 0, i32 1
store i32 %reg27, i32* %reg28
br label %parse_label_122
parse_label_122:
%param_ptr29 = getelementptr [50 x i32], [50 x i32]* %sp, i32 0, i32 1
%param_raw30 = load i32, i32* %param_ptr29
%reg31 = trunc i32 %param_raw30 to i1
br i1 %reg31, label %true_case_127, label %false_case_129
true_case_127:
br label %statement_135
false_case_129:
br label %statement_131
statement_131:
%str_ptr_reg32 = getelementptr [12 x i8], [12 x i8]* @.string_id1, i32 0, i32 0
call void(i8*) @print(i8* %str_ptr_reg32)
br label %statement_135
statement_135:
%param_ptr33 = getelementptr [50 x i32], [50 x i32]* %sp, i32 0, i32 0
%param_raw34 = load i32, i32* %param_ptr33
%reg35 = trunc i32 %param_raw34 to i1
br i1 %reg35, label %true_case_140, label %false_case_142
true_case_140:
br label %parse_label_144
false_case_142:
br label %false_case_155
parse_label_144:
%param_ptr36 = getelementptr [50 x i32], [50 x i32]* %sp, i32 0, i32 1
%param_raw37 = load i32, i32* %param_ptr36
%reg38 = trunc i32 %param_raw37 to i1
br i1 %reg38, label %true_case_149, label %false_case_151
true_case_149:
br label %true_case_153
false_case_151:
br label %false_case_155
true_case_153:
br label %set_bool_reg_157
false_case_155:
br label %set_bool_reg_157
set_bool_reg_157:
%reg39 = phi i32 [1, %true_case_153], [0, %false_case_155]
%reg40 = getelementptr [50 x i32], [50 x i32]* %sp, i32 0, i32 2
store i32 %reg39, i32* %reg40
br label %parse_label_162
parse_label_162:
%param_ptr41 = getelementptr [50 x i32], [50 x i32]* %sp, i32 0, i32 2
%param_raw42 = load i32, i32* %param_ptr41
%reg43 = trunc i32 %param_raw42 to i1
br i1 %reg43, label %true_case_167, label %false_case_169
true_case_167:
br label %statement_175
false_case_169:
br label %statement_171
statement_171:
%str_ptr_reg44 = getelementptr [12 x i8], [12 x i8]* @.string_id2, i32 0, i32 0
call void(i8*) @print(i8* %str_ptr_reg44)
br label %statement_175
statement_175:
%reg45 = call i1(i32, i32) @f(i32 120, i32 110)
br i1 %reg45, label %true_case_178, label %false_case_180
true_case_178:
br label %true_case_202
false_case_180:
br label %parse_label_182
parse_label_182:
%reg46 = call i1(i32, i32) @f(i32 10, i32 6)
br i1 %reg46, label %true_case_185, label %false_case_187
true_case_185:
br label %true_case_189
false_case_187:
br label %false_case_191
true_case_189:
br label %set_bool_reg_193
false_case_191:
br label %set_bool_reg_193
set_bool_reg_193:
%reg47 = phi i32 [1, %true_case_189], [0, %false_case_191]
%reg48 = add i32 0, %reg47
%reg49 = call i1(i32, i32) @g(i32 45, i32 %reg48)
br i1 %reg49, label %true_case_198, label %false_case_200
true_case_198:
br label %true_case_202
false_case_200:
br label %false_case_204
true_case_202:
br label %set_bool_reg_206
false_case_204:
br label %set_bool_reg_206
set_bool_reg_206:
%reg50 = phi i32 [1, %true_case_202], [0, %false_case_204]
%reg51 = getelementptr [50 x i32], [50 x i32]* %sp, i32 0, i32 3
store i32 %reg50, i32* %reg51
br label %parse_label_211
parse_label_211:
%param_ptr52 = getelementptr [50 x i32], [50 x i32]* %sp, i32 0, i32 2
%param_raw53 = load i32, i32* %param_ptr52
%reg54 = trunc i32 %param_raw53 to i1
br i1 %reg54, label %true_case_216, label %false_case_218
true_case_216:
br label %parse_label_224
false_case_218:
br label %statement_220
statement_220:
%str_ptr_reg55 = getelementptr [21 x i8], [21 x i8]* @.string_id3, i32 0, i32 0
call void(i8*) @print(i8* %str_ptr_reg55)
br label %parse_label_224
parse_label_224:
%param_ptr56 = getelementptr [50 x i32], [50 x i32]* %sp, i32 0, i32 1
%param_raw57 = load i32, i32* %param_ptr56
%reg58 = trunc i32 %param_raw57 to i1
br i1 %reg58, label %true_case_229, label %false_case_231
true_case_229:
br label %parse_label_233
false_case_231:
br label %parse_label_260
parse_label_233:
%param_ptr59 = getelementptr [50 x i32], [50 x i32]* %sp, i32 0, i32 0
%param_raw60 = load i32, i32* %param_ptr59
%reg61 = trunc i32 %param_raw60 to i1
br i1 %reg61, label %true_case_238, label %false_case_240
true_case_238:
br label %parse_label_242
false_case_240:
br label %parse_label_260
parse_label_242:
%param_ptr62 = getelementptr [50 x i32], [50 x i32]* %sp, i32 0, i32 1
%param_raw63 = load i32, i32* %param_ptr62
%reg64 = trunc i32 %param_raw63 to i1
br i1 %reg64, label %true_case_247, label %false_case_249
true_case_247:
br label %parse_label_251
false_case_249:
br label %parse_label_260
parse_label_251:
%param_ptr65 = getelementptr [50 x i32], [50 x i32]* %sp, i32 0, i32 3
%param_raw66 = load i32, i32* %param_ptr65
%reg67 = trunc i32 %param_raw66 to i1
br i1 %reg67, label %true_case_256, label %false_case_258
true_case_256:
br label %statement_269
false_case_258:
br label %parse_label_260
parse_label_260:
%param_ptr68 = getelementptr [50 x i32], [50 x i32]* %sp, i32 0, i32 2
%param_raw69 = load i32, i32* %param_ptr68
%reg70 = trunc i32 %param_raw69 to i1
br i1 %reg70, label %true_case_265, label %false_case_267
true_case_265:
br label %statement_273
false_case_267:
br label %statement_269
statement_269:
%str_ptr_reg71 = getelementptr [9 x i8], [9 x i8]* @.string_id4, i32 0, i32 0
call void(i8*) @print(i8* %str_ptr_reg71)
br label %parse_label_277
statement_273:
%str_ptr_reg72 = getelementptr [11 x i8], [11 x i8]* @.string_id5, i32 0, i32 0
call void(i8*) @print(i8* %str_ptr_reg72)
br label %parse_label_277
parse_label_277:
%reg73 = call i1(i32, i32) @f(i32 10, i32 6)
br i1 %reg73, label %true_case_280, label %false_case_282
true_case_280:
br label %parse_label_284
false_case_282:
br label %statement_319
parse_label_284:
%param_ptr74 = getelementptr [50 x i32], [50 x i32]* %sp, i32 0, i32 0
%param_raw75 = load i32, i32* %param_ptr74
%reg76 = trunc i32 %param_raw75 to i1
br i1 %reg76, label %true_case_289, label %false_case_291
true_case_289:
br label %true_case_302
false_case_291:
br label %parse_label_293
parse_label_293:
%param_ptr77 = getelementptr [50 x i32], [50 x i32]* %sp, i32 0, i32 1
%param_raw78 = load i32, i32* %param_ptr77
%reg79 = trunc i32 %param_raw78 to i1
br i1 %reg79, label %true_case_298, label %false_case_300
true_case_298:
br label %true_case_302
false_case_300:
br label %false_case_304
true_case_302:
br label %set_bool_reg_306
false_case_304:
br label %set_bool_reg_306
set_bool_reg_306:
%reg80 = phi i32 [1, %true_case_302], [0, %false_case_304]
%reg81 = add i32 0, %reg80
%reg82 = call i1(i32, i32) @g(i32 100, i32 %reg81)
br i1 %reg82, label %true_case_311, label %false_case_313
true_case_311:
br label %statement_315
false_case_313:
br label %statement_319
statement_315:
%str_ptr_reg83 = getelementptr [10 x i8], [10 x i8]* @.string_id6, i32 0, i32 0
call void(i8*) @print(i8* %str_ptr_reg83)
br label %parse_label_323
statement_319:
%str_ptr_reg84 = getelementptr [12 x i8], [12 x i8]* @.string_id7, i32 0, i32 0
call void(i8*) @print(i8* %str_ptr_reg84)
br label %parse_label_323
parse_label_323:
%param_ptr85 = getelementptr [50 x i32], [50 x i32]* %sp, i32 0, i32 0
%param_raw86 = load i32, i32* %param_ptr85
%reg87 = trunc i32 %param_raw86 to i1
br i1 %reg87, label %true_case_328, label %false_case_330
true_case_328:
br label %parse_label_332
false_case_330:
br label %statement_385
parse_label_332:
%param_ptr88 = getelementptr [50 x i32], [50 x i32]* %sp, i32 0, i32 1
%param_raw89 = load i32, i32* %param_ptr88
%reg90 = trunc i32 %param_raw89 to i1
br i1 %reg90, label %true_case_337, label %false_case_339
true_case_337:
br label %parse_label_341
false_case_339:
br label %statement_385
parse_label_341:
%param_ptr91 = getelementptr [50 x i32], [50 x i32]* %sp, i32 0, i32 2
%param_raw92 = load i32, i32* %param_ptr91
%reg93 = trunc i32 %param_raw92 to i1
br i1 %reg93, label %true_case_346, label %false_case_348
true_case_346:
br label %parse_label_350
false_case_348:
br label %statement_385
parse_label_350:
%param_ptr94 = getelementptr [50 x i32], [50 x i32]* %sp, i32 0, i32 3
%param_raw95 = load i32, i32* %param_ptr94
%reg96 = trunc i32 %param_raw95 to i1
br i1 %reg96, label %true_case_355, label %false_case_357
true_case_355:
br label %parse_label_359
false_case_357:
br label %statement_385
parse_label_359:
%reg97 = call i1(i32, i32) @f(i32 10, i32 18)
br i1 %reg97, label %true_case_362, label %false_case_364
true_case_362:
br label %parse_label_366
false_case_364:
br label %statement_385
parse_label_366:
br label %false_case_370
true_case_368:
br label %set_bool_reg_372
false_case_370:
br label %set_bool_reg_372
set_bool_reg_372:
%reg98 = phi i32 [1, %true_case_368], [0, %false_case_370]
%reg99 = add i32 0, %reg98
%reg100 = call i1(i32, i32) @g(i32 5, i32 %reg99)
br i1 %reg100, label %true_case_377, label %false_case_379
true_case_377:
br label %statement_381
false_case_379:
br label %statement_385
statement_381:
%str_ptr_reg101 = getelementptr [9 x i8], [9 x i8]* @.string_id8, i32 0, i32 0
call void(i8*) @print(i8* %str_ptr_reg101)
br label %func_end_390
statement_385:
%str_ptr_reg102 = getelementptr [11 x i8], [11 x i8]* @.string_id9, i32 0, i32 0
call void(i8*) @print(i8* %str_ptr_reg102)
br label %func_end_390
br label %func_end_390
func_end_390:
ret void
}
