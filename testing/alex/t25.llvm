declare i32 @printf(i8*, ...)
declare void @exit(i32)
@.int_specifier = constant [4 x i8] c"%d\0A\00"
@.str_specifier = constant [4 x i8] c"%s\0A\00"
define void @printi(i32) {
    %spec_ptr = getelementptr [4 x i8], [4 x i8]* @.int_specifier, i32 0, i32 0
    call i32 (i8*, ...) @printf(i8* %spec_ptr, i32 %0)
    ret void
}
define void @print(i8*) {
    %spec_ptr = getelementptr [4 x i8], [4 x i8]* @.str_specifier, i32 0, i32 0
    call i32 (i8*, ...) @printf(i8* %spec_ptr, i8* %0)
    ret void
}
@.str_div_zero = constant [23 x i8] c"Error division by zero\00"
define void @errorIfZero9001(i32) {
	%cond = icmp eq i32 0, %0
	br i1 %cond, label %exit, label %return
exit:
	%err_str_ptr = getelementptr [23 x i8], [23 x i8]* @.str_div_zero, i32 0, i32 0
	call void(i8*) @print(i8* %err_str_ptr)
	call void(i32) @exit(i32 1)
	br label %return
return:
	ret void
}
@.string_id0 = constant [27 x i8] c"Printing number from 0 to \00"
@.string_id1 = constant [15 x i8] c"Printing done!\00"
@.string_id2 = constant [48 x i8] c"Byte test - testing addition and multiplication\00"
define void@printer(i32){
%sp = alloca [50 x i32]
br label %statement_3
statement_3:
%reg1 = add i32 0, %0
%reg2 = getelementptr [50 x i32], [50 x i32]* %sp, i32 0, i32 0
store i32 %reg1, i32* %reg2
br label %statement_8
statement_8:
%str_ptr_reg3 = getelementptr [27 x i8], [27 x i8]* @.string_id0, i32 0, i32 0
call void(i8*) @print(i8* %str_ptr_reg3)
br label %statement_12
statement_12:
%param_ptr4 = getelementptr [50 x i32], [50 x i32]* %sp, i32 0, i32 0
%param_raw5 = load i32, i32* %param_ptr4
%reg6 = add i32 0, %param_raw5
call void(i32) @printi(i32 %reg6)
br label %cond_18
cond_18:
%param_ptr7 = getelementptr [50 x i32], [50 x i32]* %sp, i32 0, i32 0
%param_raw8 = load i32, i32* %param_ptr7
%reg9 = add i32 0, %param_raw8
%reg10 = icmp sge i32 %reg9,  0
br i1 %reg10, label %statement_24, label %statement_46
statement_24:
%reg11 = getelementptr [50 x i32], [50 x i32]* %sp, i32 0, i32 1
store i32 0, i32* %reg11
br label %statement_28
statement_28:
%reg12 = getelementptr [50 x i32], [50 x i32]* %sp, i32 0, i32 2
store i32 0, i32* %reg12
br label %statement_32
statement_32:
%param_ptr13 = getelementptr [50 x i32], [50 x i32]* %sp, i32 0, i32 0
%param_raw14 = load i32, i32* %param_ptr13
%reg15 = add i32 0, %param_raw14
call void(i32) @printi(i32 %reg15)
br label %statement_38
statement_38:
%param_ptr16 = getelementptr [50 x i32], [50 x i32]* %sp, i32 0, i32 0
%param_raw17 = load i32, i32* %param_ptr16
%reg18 = add i32 0, %param_raw17
%reg19 = sub i32 %reg18,  1
%reg20 = getelementptr [50 x i32], [50 x i32]* %sp, i32 0, i32 0
store i32 %reg19, i32* %reg20
br label %cond_18
statement_46:
%str_ptr_reg21 = getelementptr [15 x i8], [15 x i8]* @.string_id1, i32 0, i32 0
call void(i8*) @print(i8* %str_ptr_reg21)
br label %func_end_51
br label %func_end_51
func_end_51:
ret void
}
define void@main(){
%sp = alloca [50 x i32]
br label %statement_57
statement_57:
call void(i32) @printer(i32  5)
br label %statement_60
statement_60:
call void(i32) @printer(i32  10)
br label %statement_63
statement_63:
%str_ptr_reg22 = getelementptr [48 x i8], [48 x i8]* @.string_id2, i32 0, i32 0
call void(i8*) @print(i8* %str_ptr_reg22)
br label %statement_67
statement_67:
%reg23 = add i8  150,  150
%raw_reg24 = zext i8 %reg23 to i32
%reg25 = getelementptr [50 x i32], [50 x i32]* %sp, i32 0, i32 0
store i32 %raw_reg24, i32* %reg25
br label %statement_73
statement_73:
%param_ptr26 = getelementptr [50 x i32], [50 x i32]* %sp, i32 0, i32 0
%param_raw27 = load i32, i32* %param_ptr26
%truncated_byte28 = trunc i32 %param_raw27 to i8
%reg29 = add i8 0, %truncated_byte28
%raw_reg30 = zext i8 %reg29 to i32
call void(i32) @printi(i32 %raw_reg30)
br label %statement_81
statement_81:
%reg31 = mul i8  130,  2
%raw_reg32 = zext i8 %reg31 to i32
%reg33 = getelementptr [50 x i32], [50 x i32]* %sp, i32 0, i32 0
store i32 %raw_reg32, i32* %reg33
br label %statement_87
statement_87:
%param_ptr34 = getelementptr [50 x i32], [50 x i32]* %sp, i32 0, i32 0
%param_raw35 = load i32, i32* %param_ptr34
%truncated_byte36 = trunc i32 %param_raw35 to i8
%reg37 = add i8 0, %truncated_byte36
%raw_reg38 = zext i8 %reg37 to i32
call void(i32) @printi(i32 %raw_reg38)
br label %func_end_96
br label %func_end_96
func_end_96:
ret void
}
