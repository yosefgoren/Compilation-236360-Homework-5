declare i32 @printf(i8*, ...)
declare void @exit(i32)
@.int_specifier = constant [4 x i8] c"%d\0A\00"
@.str_specifier = constant [4 x i8] c"%s\0A\00"
define void @printi(i32) {
    %spec_ptr = getelementptr [4 x i8], [4 x i8]* @.int_specifier, i32 0, i32 0
    call i32 (i8*, ...) @printf(i8* %spec_ptr, i32 %0)
    ret void
}
define void @print(i8*) {
    %spec_ptr = getelementptr [4 x i8], [4 x i8]* @.str_specifier, i32 0, i32 0
    call i32 (i8*, ...) @printf(i8* %spec_ptr, i8* %0)
    ret void
}
@.str_div_zero = constant [23 x i8] c"Error division by zero\00"
define void @errorIfZero9001(i32) {
	%cond = icmp eq i32 0, %0
	br i1 %cond, label %exit, label %return
exit:
	%err_str_ptr = getelementptr [23 x i8], [23 x i8]* @.str_div_zero, i32 0, i32 0
	call void(i8*) @print(i8* %err_str_ptr)
	call void(i32) @exit(i32 1)
	br label %return
return:
	ret void
}
@.string_id0 = constant [2 x i8] c"*\00"
@.string_id1 = constant [2 x i8] c"*\00"
define i32@fib(i32){
%sp = alloca [50 x i32]
br label %parse_label_3
parse_label_3:
%truncated_byte1 = trunc i32 %0 to i8
%reg2 = add i8 0, %truncated_byte1
%b2int_conv_reg3 = zext i8 %reg2 to i32
%reg4 = icmp eq i32 %b2int_conv_reg3, 0
br i1 %reg4, label %statement_15, label %parse_label_9
parse_label_9:
%truncated_byte5 = trunc i32 %0 to i8
%reg6 = add i8 0, %truncated_byte5
%b2int_conv_reg7 = zext i8 %reg6 to i32
%reg8 = icmp eq i32 %b2int_conv_reg7, 1
br i1 %reg8, label %statement_15, label %statement_17
statement_15:
ret i32 1
statement_17:
%truncated_byte9 = trunc i32 %0 to i8
%reg10 = add i8 0, %truncated_byte9
%reg11 = sub i8 %reg10, 1
%raw_reg12 = zext i8 %reg11 to i32
%reg13 = call i32(i32) @fib(i32 %raw_reg12)
%reg14 = add i32 0, %reg13
%truncated_byte15 = trunc i32 %0 to i8
%reg16 = add i8 0, %truncated_byte15
%reg17 = sub i8 %reg16, 2
%raw_reg18 = zext i8 %reg17 to i32
%reg19 = call i32(i32) @fib(i32 %raw_reg18)
%reg20 = add i32 0, %reg19
%reg21 = add i32 %reg14, %reg20
ret i32 %reg21
br label %func_end_33
func_end_33:
ret i32 0
}
define void@main(){
%sp = alloca [50 x i32]
br label %statement_39
statement_39:
%reg22 = getelementptr [50 x i32], [50 x i32]* %sp, i32 0, i32 0
store i32 0, i32* %reg22
br label %cond_43
cond_43:
%param_ptr23 = getelementptr [50 x i32], [50 x i32]* %sp, i32 0, i32 0
%param_raw24 = load i32, i32* %param_ptr23
%truncated_byte25 = trunc i32 %param_raw24 to i8
%reg26 = add i8 0, %truncated_byte25
%b2int_conv_reg27 = zext i8 %reg26 to i32
%reg28 = icmp slt i32 %b2int_conv_reg27, 10
br i1 %reg28, label %statement_51, label %statement_84
statement_51:
%param_ptr29 = getelementptr [50 x i32], [50 x i32]* %sp, i32 0, i32 0
%param_raw30 = load i32, i32* %param_ptr29
%truncated_byte31 = trunc i32 %param_raw30 to i8
%reg32 = add i8 0, %truncated_byte31
%raw_reg33 = zext i8 %reg32 to i32
%reg34 = call i32(i32) @fib(i32 %raw_reg33)
%reg35 = add i32 0, %reg34
call void(i32) @printi(i32 %reg35)
br label %parse_label_61
parse_label_61:
%param_ptr36 = getelementptr [50 x i32], [50 x i32]* %sp, i32 0, i32 0
%param_raw37 = load i32, i32* %param_ptr36
%truncated_byte38 = trunc i32 %param_raw37 to i8
%reg39 = add i8 0, %truncated_byte38
%b2int_conv_reg40 = zext i8 %reg39 to i32
%reg41 = add i32 %b2int_conv_reg40, 1
%reg42 = icmp slt i32 %reg41, 10
br i1 %reg42, label %statement_70, label %statement_74
statement_70:
%str_ptr_reg43 = getelementptr [2 x i8], [2 x i8]* @.string_id0, i32 0, i32 0
call void(i8*) @print(i8* %str_ptr_reg43)
br label %statement_74
statement_74:
%param_ptr44 = getelementptr [50 x i32], [50 x i32]* %sp, i32 0, i32 0
%param_raw45 = load i32, i32* %param_ptr44
%truncated_byte46 = trunc i32 %param_raw45 to i8
%reg47 = add i8 0, %truncated_byte46
%reg48 = add i8 %reg47, 1
%raw_reg49 = zext i8 %reg48 to i32
%reg50 = getelementptr [50 x i32], [50 x i32]* %sp, i32 0, i32 0
store i32 %raw_reg49, i32* %reg50
br label %cond_43
statement_84:
%str_ptr_reg51 = getelementptr [2 x i8], [2 x i8]* @.string_id1, i32 0, i32 0
call void(i8*) @print(i8* %str_ptr_reg51)
br label %func_end_89
br label %func_end_89
func_end_89:
ret void
}
