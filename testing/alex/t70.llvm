declare i32 @printf(i8*, ...)
declare void @exit(i32)
@.int_specifier = constant [4 x i8] c"%d\0A\00"
@.str_specifier = constant [4 x i8] c"%s\0A\00"
define void @printi(i32) {
    %spec_ptr = getelementptr [4 x i8], [4 x i8]* @.int_specifier, i32 0, i32 0
    call i32 (i8*, ...) @printf(i8* %spec_ptr, i32 %0)
    ret void
}
define void @print(i8*) {
    %spec_ptr = getelementptr [4 x i8], [4 x i8]* @.str_specifier, i32 0, i32 0
    call i32 (i8*, ...) @printf(i8* %spec_ptr, i8* %0)
    ret void
}
@.str_div_zero = constant [23 x i8] c"Error division by zero\00"
define void @errorIfZero9001(i32) {
	%cond = icmp eq i32 0, %0
	br i1 %cond, label %exit, label %return
exit:
	%err_str_ptr = getelementptr [23 x i8], [23 x i8]* @.str_div_zero, i32 0, i32 0
	call void(i8*) @print(i8* %err_str_ptr)
	call void(i32) @exit(i32 1)
	br label %return
return:
	ret void
}
@.string_id0 = constant [12 x i8] c"val is true\00"
@.string_id1 = constant [13 x i8] c"val is false\00"
@.string_id2 = constant [5 x i8] c"true\00"
@.string_id3 = constant [5 x i8] c"true\00"
define void@printByValue(i32){
%sp = alloca [50 x i32]
br label %parse_label_3
parse_label_3:
%reg1 = trunc i32 %0 to i1
br i1 %reg1, label %true_case_6, label %false_case_8
true_case_6:
br label %statement_10
false_case_8:
br label %statement_14
statement_10:
%str_ptr_reg2 = getelementptr [12 x i8], [12 x i8]* @.string_id0, i32 0, i32 0
call void(i8*) @print(i8* %str_ptr_reg2)
br label %func_end_19
statement_14:
%str_ptr_reg3 = getelementptr [13 x i8], [13 x i8]* @.string_id1, i32 0, i32 0
call void(i8*) @print(i8* %str_ptr_reg3)
br label %func_end_19
br label %func_end_19
func_end_19:
ret void
}
define void@main(){
%sp = alloca [50 x i32]
br label %statement_25
statement_25:
br label %true_case_27
true_case_27:
br label %set_bool_reg_31
false_case_29:
br label %set_bool_reg_31
set_bool_reg_31:
%reg4 = phi i32 [1, %true_case_27], [0, %false_case_29]
%reg5 = add i32 0, %reg4
call void(i32) @printByValue(i32 %reg5)
br label %statement_36
statement_36:
br label %false_case_40
true_case_38:
br label %set_bool_reg_42
false_case_40:
br label %set_bool_reg_42
set_bool_reg_42:
%reg6 = phi i32 [1, %true_case_38], [0, %false_case_40]
%reg7 = add i32 0, %reg6
call void(i32) @printByValue(i32 %reg7)
br label %parse_label_47
parse_label_47:
br label %statement_49
statement_49:
%str_ptr_reg8 = getelementptr [5 x i8], [5 x i8]* @.string_id2, i32 0, i32 0
call void(i8*) @print(i8* %str_ptr_reg8)
br label %parse_label_53
parse_label_53:
br label %parse_label_55
parse_label_55:
br label %func_end_64
parse_label_57:
br label %statement_59
statement_59:
%str_ptr_reg9 = getelementptr [5 x i8], [5 x i8]* @.string_id3, i32 0, i32 0
call void(i8*) @print(i8* %str_ptr_reg9)
br label %func_end_64
br label %func_end_64
func_end_64:
ret void
}
