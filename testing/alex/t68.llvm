declare i32 @printf(i8*, ...)
declare void @exit(i32)
@.int_specifier = constant [4 x i8] c"%d\0A\00"
@.str_specifier = constant [4 x i8] c"%s\0A\00"
define void @printi(i32) {
    %spec_ptr = getelementptr [4 x i8], [4 x i8]* @.int_specifier, i32 0, i32 0
    call i32 (i8*, ...) @printf(i8* %spec_ptr, i32 %0)
    ret void
}
define void @print(i8*) {
    %spec_ptr = getelementptr [4 x i8], [4 x i8]* @.str_specifier, i32 0, i32 0
    call i32 (i8*, ...) @printf(i8* %spec_ptr, i8* %0)
    ret void
}
@.str_div_zero = constant [23 x i8] c"Error division by zero\00"
define void @errorIfZero9001(i32) {
	%cond = icmp eq i32 0, %0
	br i1 %cond, label %exit, label %return
exit:
	%err_str_ptr = getelementptr [23 x i8], [23 x i8]* @.str_div_zero, i32 0, i32 0
	call void(i8*) @print(i8* %err_str_ptr)
	call void(i32) @exit(i32 1)
	br label %return
return:
	ret void
}
@.string_id0 = constant [5 x i8] c"true\00"
@.string_id1 = constant [6 x i8] c"false\00"
@.string_id2 = constant [13 x i8] c"bool is true\00"
define void@printBool(i32){
%sp = alloca [50 x i32]
br label %parse_label_3
parse_label_3:
%reg1 = trunc i32 %0 to i1
br i1 %reg1, label %true_case_6, label %false_case_8
true_case_6:
br label %statement_10
false_case_8:
br label %statement_14
statement_10:
%str_ptr_reg2 = getelementptr [5 x i8], [5 x i8]* @.string_id0, i32 0, i32 0
call void(i8*) @print(i8* %str_ptr_reg2)
br label %func_end_19
statement_14:
%str_ptr_reg3 = getelementptr [6 x i8], [6 x i8]* @.string_id1, i32 0, i32 0
call void(i8*) @print(i8* %str_ptr_reg3)
br label %func_end_19
br label %func_end_19
func_end_19:
ret void
}
define void@printFoo(i32, i32, i32, i32){
%sp = alloca [50 x i32]
br label %parse_label_25
parse_label_25:
%reg4 = trunc i32 %0 to i1
br i1 %reg4, label %true_case_28, label %false_case_30
true_case_28:
br label %statement_32
false_case_30:
br label %statement_36
statement_32:
%str_ptr_reg5 = getelementptr [13 x i8], [13 x i8]* @.string_id2, i32 0, i32 0
call void(i8*) @print(i8* %str_ptr_reg5)
br label %statement_36
statement_36:
%reg6 = add i32 0, %1
call void(i32) @printi(i32 %reg6)
br label %statement_40
statement_40:
%reg7 = trunc i32 %2 to i1
br i1 %reg7, label %true_case_43, label %false_case_45
true_case_43:
br label %true_case_47
false_case_45:
br label %false_case_49
true_case_47:
br label %set_bool_reg_51
false_case_49:
br label %set_bool_reg_51
set_bool_reg_51:
%reg8 = phi i32 [1, %true_case_47], [0, %false_case_49]
%reg9 = add i32 0, %reg8
call void(i32) @printBool(i32 %reg9)
br label %statement_56
statement_56:
%reg10 = add i32 0, %3
call void(i32) @printi(i32 %reg10)
br label %func_end_61
br label %func_end_61
func_end_61:
ret void
}
define i32@inc(i32){
%sp = alloca [50 x i32]
br label %statement_67
statement_67:
%reg11 = add i32 0, %0
%reg12 = add i32 %reg11, 1
ret i32 %reg12
br label %func_end_72
func_end_72:
ret i32 0
}
define void@main(){
%sp = alloca [50 x i32]
br label %statement_78
statement_78:
%reg13 = icmp slt i32 5, 6
br i1 %reg13, label %true_case_81, label %false_case_83
true_case_81:
br label %set_bool_reg_85
false_case_83:
br label %set_bool_reg_85
set_bool_reg_85:
%reg14 = phi i32 [1, %true_case_81], [0, %false_case_83]
%reg15 = add i32 0, %reg14
%reg16 = add i32 2, 4
br label %true_case_90
true_case_90:
br label %set_bool_reg_94
false_case_92:
br label %set_bool_reg_94
set_bool_reg_94:
%reg17 = phi i32 [1, %true_case_90], [0, %false_case_92]
%reg18 = add i32 0, %reg17
%reg19 = call i32(i32) @inc(i32 2)
%reg20 = add i32 0, %reg19
call void(i32, i32, i32, i32) @printFoo(i32 %reg15, i32 %reg16, i32 %reg18, i32 %reg20)
br label %func_end_102
br label %func_end_102
func_end_102:
ret void
}
