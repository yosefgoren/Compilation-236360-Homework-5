declare i32 @printf(i8*, ...)
declare void @exit(i32)
@.int_specifier = constant [4 x i8] c"%d\0A\00"
@.str_specifier = constant [4 x i8] c"%s\0A\00"
define void @printi(i32) {
    %spec_ptr = getelementptr [4 x i8], [4 x i8]* @.int_specifier, i32 0, i32 0
    call i32 (i8*, ...) @printf(i8* %spec_ptr, i32 %0)
    ret void
}
define void @print(i8*) {
    %spec_ptr = getelementptr [4 x i8], [4 x i8]* @.str_specifier, i32 0, i32 0
    call i32 (i8*, ...) @printf(i8* %spec_ptr, i8* %0)
    ret void
}
@.str_div_zero = constant [23 x i8] c"Error division by zero\00"
define void @errorIfZero9001(i32) {
	%cond = icmp eq i32 0, %0
	br i1 %cond, label %exit, label %return
exit:
	%err_str_ptr = getelementptr [23 x i8], [23 x i8]* @.str_div_zero, i32 0, i32 0
	call void(i8*) @print(i8* %err_str_ptr)
	call void(i32) @exit(i32 1)
	br label %return
return:
	ret void
}
@.string_id0 = constant [31 x i8] c"Check early exit from while...\00"
@.string_id1 = constant [26 x i8] c"failed... let's try again\00"
@.string_id2 = constant [31 x i8] c"Check early exit from while...\00"
@.string_id3 = constant [26 x i8] c"failed... let's try again\00"
@.string_id4 = constant [32 x i8] c"check early exit from switch...\00"
@.string_id5 = constant [8 x i8] c"failed2\00"
@.string_id6 = constant [8 x i8] c"failed8\00"
@.string_id7 = constant [32 x i8] c"check early exit from switch...\00"
@.string_id8 = constant [8 x i8] c"failed2\00"
@.string_id9 = constant [8 x i8] c"failed8\00"
@.string_id10 = constant [32 x i8] c"check early exit from switch...\00"
@.string_id11 = constant [9 x i8] c"failed1b\00"
@.string_id12 = constant [9 x i8] c"failed7b\00"
@.string_id13 = constant [32 x i8] c"check early exit from switch...\00"
@.string_id14 = constant [9 x i8] c"failed1b\00"
@.string_id15 = constant [9 x i8] c"failed7b\00"
@.string_id16 = constant [32 x i8] c"check early exit from switch...\00"
@.string_id17 = constant [9 x i8] c"failed3b\00"
@.string_id18 = constant [9 x i8] c"failed9b\00"
@.string_id19 = constant [8 x i8] c"SUCCESS\00"
define void@returnFromWhile(){
%sp = alloca [50 x i32]
br label %statement_3
statement_3:
%reg1 = getelementptr [50 x i32], [50 x i32]* %sp, i32 0, i32 0
store i32 0, i32* %reg1
br label %cond_7
cond_7:
%param_ptr2 = getelementptr [50 x i32], [50 x i32]* %sp, i32 0, i32 0
%param_raw3 = load i32, i32* %param_ptr2
%reg4 = add i32 0, %param_raw3
%reg5 = icmp slt i32 %reg4, 10
br i1 %reg5, label %statement_13, label %func_end_32
statement_13:
%str_ptr_reg6 = getelementptr [31 x i8], [31 x i8]* @.string_id0, i32 0, i32 0
call void(i8*) @print(i8* %str_ptr_reg6)
br label %statement_17
statement_17:
ret void
statement_19:
%param_ptr7 = getelementptr [50 x i32], [50 x i32]* %sp, i32 0, i32 0
%param_raw8 = load i32, i32* %param_ptr7
%reg9 = add i32 0, %param_raw8
%reg10 = add i32 %reg9, 1
%reg11 = getelementptr [50 x i32], [50 x i32]* %sp, i32 0, i32 0
store i32 %reg10, i32* %reg11
br label %statement_27
statement_27:
%str_ptr_reg12 = getelementptr [26 x i8], [26 x i8]* @.string_id1, i32 0, i32 0
call void(i8*) @print(i8* %str_ptr_reg12)
br label %cond_7
br label %func_end_32
func_end_32:
ret void
}
define i32@returnFromWhile2(){
%sp = alloca [50 x i32]
br label %statement_38
statement_38:
%reg13 = getelementptr [50 x i32], [50 x i32]* %sp, i32 0, i32 0
store i32 2, i32* %reg13
br label %cond_42
cond_42:
%param_ptr14 = getelementptr [50 x i32], [50 x i32]* %sp, i32 0, i32 0
%param_raw15 = load i32, i32* %param_ptr14
%reg16 = add i32 0, %param_raw15
%reg17 = icmp slt i32 %reg16, 10
br i1 %reg17, label %statement_48, label %func_end_70
statement_48:
%str_ptr_reg18 = getelementptr [31 x i8], [31 x i8]* @.string_id2, i32 0, i32 0
call void(i8*) @print(i8* %str_ptr_reg18)
br label %statement_52
statement_52:
%param_ptr19 = getelementptr [50 x i32], [50 x i32]* %sp, i32 0, i32 0
%param_raw20 = load i32, i32* %param_ptr19
%reg21 = add i32 0, %param_raw20
ret i32 %reg21
statement_57:
%param_ptr22 = getelementptr [50 x i32], [50 x i32]* %sp, i32 0, i32 0
%param_raw23 = load i32, i32* %param_ptr22
%reg24 = add i32 0, %param_raw23
%reg25 = add i32 %reg24, 1
%reg26 = getelementptr [50 x i32], [50 x i32]* %sp, i32 0, i32 0
store i32 %reg25, i32* %reg26
br label %statement_65
statement_65:
%str_ptr_reg27 = getelementptr [26 x i8], [26 x i8]* @.string_id3, i32 0, i32 0
call void(i8*) @print(i8* %str_ptr_reg27)
br label %cond_42
br label %func_end_70
func_end_70:
ret i32 0
}
define void@returnFromSwitchInt(){
%sp = alloca [50 x i32]
br label %statement_76
statement_76:
%str_ptr_reg28 = getelementptr [32 x i8], [32 x i8]* @.string_id4, i32 0, i32 0
call void(i8*) @print(i8* %str_ptr_reg28)
br label %statement_80
statement_80:
%reg29 = getelementptr [50 x i32], [50 x i32]* %sp, i32 0, i32 0
store i32 5, i32* %reg29
br label %parse_label_84
parse_label_84:
%param_ptr30 = getelementptr [50 x i32], [50 x i32]* %sp, i32 0, i32 0
%param_raw31 = load i32, i32* %param_ptr30
%reg32 = add i32 0, %param_raw31
%reg33 = icmp eq i32 %reg32, 2
br i1 %reg33, label %statement_90, label %parse_label_94
statement_90:
%str_ptr_reg34 = getelementptr [8 x i8], [8 x i8]* @.string_id5, i32 0, i32 0
call void(i8*) @print(i8* %str_ptr_reg34)
br label %func_end_113
parse_label_94:
%param_ptr35 = getelementptr [50 x i32], [50 x i32]* %sp, i32 0, i32 0
%param_raw36 = load i32, i32* %param_ptr35
%reg37 = add i32 0, %param_raw36
%reg38 = icmp eq i32 %reg37, 5
br i1 %reg38, label %statement_100, label %parse_label_102
statement_100:
ret void
parse_label_102:
%param_ptr39 = getelementptr [50 x i32], [50 x i32]* %sp, i32 0, i32 0
%param_raw40 = load i32, i32* %param_ptr39
%reg41 = add i32 0, %param_raw40
%reg42 = icmp eq i32 %reg41, 8
br i1 %reg42, label %statement_108, label %func_end_113
statement_108:
%str_ptr_reg43 = getelementptr [8 x i8], [8 x i8]* @.string_id6, i32 0, i32 0
call void(i8*) @print(i8* %str_ptr_reg43)
br label %func_end_113
br label %func_end_113
func_end_113:
ret void
}
define i32@returnFromSwitchInt2(){
%sp = alloca [50 x i32]
br label %statement_119
statement_119:
%str_ptr_reg44 = getelementptr [32 x i8], [32 x i8]* @.string_id7, i32 0, i32 0
call void(i8*) @print(i8* %str_ptr_reg44)
br label %statement_123
statement_123:
%reg45 = getelementptr [50 x i32], [50 x i32]* %sp, i32 0, i32 0
store i32 5, i32* %reg45
br label %parse_label_127
parse_label_127:
%param_ptr46 = getelementptr [50 x i32], [50 x i32]* %sp, i32 0, i32 0
%param_raw47 = load i32, i32* %param_ptr46
%reg48 = add i32 0, %param_raw47
%reg49 = icmp eq i32 %reg48, 2
br i1 %reg49, label %statement_133, label %parse_label_137
statement_133:
%str_ptr_reg50 = getelementptr [8 x i8], [8 x i8]* @.string_id8, i32 0, i32 0
call void(i8*) @print(i8* %str_ptr_reg50)
br label %statement_155
parse_label_137:
%param_ptr51 = getelementptr [50 x i32], [50 x i32]* %sp, i32 0, i32 0
%param_raw52 = load i32, i32* %param_ptr51
%reg53 = add i32 0, %param_raw52
%reg54 = icmp eq i32 %reg53, 5
br i1 %reg54, label %statement_143, label %parse_label_145
statement_143:
ret i32 0
parse_label_145:
%param_ptr55 = getelementptr [50 x i32], [50 x i32]* %sp, i32 0, i32 0
%param_raw56 = load i32, i32* %param_ptr55
%reg57 = add i32 0, %param_raw56
%reg58 = icmp eq i32 %reg57, 8
br i1 %reg58, label %statement_151, label %statement_155
statement_151:
%str_ptr_reg59 = getelementptr [8 x i8], [8 x i8]* @.string_id9, i32 0, i32 0
call void(i8*) @print(i8* %str_ptr_reg59)
br label %statement_155
statement_155:
ret i32 0
br label %func_end_158
func_end_158:
ret i32 0
}
define void@returnFromSwitchByte(){
%sp = alloca [50 x i32]
br label %statement_164
statement_164:
%str_ptr_reg60 = getelementptr [32 x i8], [32 x i8]* @.string_id10, i32 0, i32 0
call void(i8*) @print(i8* %str_ptr_reg60)
br label %statement_168
statement_168:
%reg61 = getelementptr [50 x i32], [50 x i32]* %sp, i32 0, i32 0
store i32 4, i32* %reg61
br label %parse_label_172
parse_label_172:
%param_ptr62 = getelementptr [50 x i32], [50 x i32]* %sp, i32 0, i32 0
%param_raw63 = load i32, i32* %param_ptr62
%truncated_byte64 = trunc i32 %param_raw63 to i8
%reg65 = add i8 0, %truncated_byte64
%reg66 = icmp eq i8 %reg65, 1
br i1 %reg66, label %statement_179, label %parse_label_183
statement_179:
%str_ptr_reg67 = getelementptr [9 x i8], [9 x i8]* @.string_id11, i32 0, i32 0
call void(i8*) @print(i8* %str_ptr_reg67)
br label %func_end_204
parse_label_183:
%param_ptr68 = getelementptr [50 x i32], [50 x i32]* %sp, i32 0, i32 0
%param_raw69 = load i32, i32* %param_ptr68
%truncated_byte70 = trunc i32 %param_raw69 to i8
%reg71 = add i8 0, %truncated_byte70
%reg72 = icmp eq i8 %reg71, 4
br i1 %reg72, label %statement_190, label %parse_label_192
statement_190:
ret void
parse_label_192:
%param_ptr73 = getelementptr [50 x i32], [50 x i32]* %sp, i32 0, i32 0
%param_raw74 = load i32, i32* %param_ptr73
%truncated_byte75 = trunc i32 %param_raw74 to i8
%reg76 = add i8 0, %truncated_byte75
%reg77 = icmp eq i8 %reg76, 7
br i1 %reg77, label %statement_199, label %func_end_204
statement_199:
%str_ptr_reg78 = getelementptr [9 x i8], [9 x i8]* @.string_id12, i32 0, i32 0
call void(i8*) @print(i8* %str_ptr_reg78)
br label %func_end_204
br label %func_end_204
func_end_204:
ret void
}
define i8@returnFromSwitchByte2(){
%sp = alloca [50 x i32]
br label %statement_210
statement_210:
%str_ptr_reg79 = getelementptr [32 x i8], [32 x i8]* @.string_id13, i32 0, i32 0
call void(i8*) @print(i8* %str_ptr_reg79)
br label %statement_214
statement_214:
%reg80 = getelementptr [50 x i32], [50 x i32]* %sp, i32 0, i32 0
store i32 4, i32* %reg80
br label %parse_label_218
parse_label_218:
%param_ptr81 = getelementptr [50 x i32], [50 x i32]* %sp, i32 0, i32 0
%param_raw82 = load i32, i32* %param_ptr81
%truncated_byte83 = trunc i32 %param_raw82 to i8
%reg84 = add i8 0, %truncated_byte83
%reg85 = icmp eq i8 %reg84, 1
br i1 %reg85, label %statement_225, label %parse_label_229
statement_225:
%str_ptr_reg86 = getelementptr [9 x i8], [9 x i8]* @.string_id14, i32 0, i32 0
call void(i8*) @print(i8* %str_ptr_reg86)
br label %statement_249
parse_label_229:
%param_ptr87 = getelementptr [50 x i32], [50 x i32]* %sp, i32 0, i32 0
%param_raw88 = load i32, i32* %param_ptr87
%truncated_byte89 = trunc i32 %param_raw88 to i8
%reg90 = add i8 0, %truncated_byte89
%reg91 = icmp eq i8 %reg90, 4
br i1 %reg91, label %statement_236, label %parse_label_238
statement_236:
ret i8 0
parse_label_238:
%param_ptr92 = getelementptr [50 x i32], [50 x i32]* %sp, i32 0, i32 0
%param_raw93 = load i32, i32* %param_ptr92
%truncated_byte94 = trunc i32 %param_raw93 to i8
%reg95 = add i8 0, %truncated_byte94
%reg96 = icmp eq i8 %reg95, 7
br i1 %reg96, label %statement_245, label %statement_249
statement_245:
%str_ptr_reg97 = getelementptr [9 x i8], [9 x i8]* @.string_id15, i32 0, i32 0
call void(i8*) @print(i8* %str_ptr_reg97)
br label %statement_249
statement_249:
ret i8 0
br label %func_end_252
func_end_252:
ret i8 0
}
define i1@returnFromSwitchBool(){
%sp = alloca [50 x i32]
br label %statement_258
statement_258:
%str_ptr_reg98 = getelementptr [32 x i8], [32 x i8]* @.string_id16, i32 0, i32 0
call void(i8*) @print(i8* %str_ptr_reg98)
br label %statement_262
statement_262:
%reg99 = getelementptr [50 x i32], [50 x i32]* %sp, i32 0, i32 0
store i32 6, i32* %reg99
br label %parse_label_266
parse_label_266:
%param_ptr100 = getelementptr [50 x i32], [50 x i32]* %sp, i32 0, i32 0
%param_raw101 = load i32, i32* %param_ptr100
%truncated_byte102 = trunc i32 %param_raw101 to i8
%reg103 = add i8 0, %truncated_byte102
%reg104 = icmp eq i8 %reg103, 3
br i1 %reg104, label %statement_273, label %parse_label_277
statement_273:
%str_ptr_reg105 = getelementptr [9 x i8], [9 x i8]* @.string_id17, i32 0, i32 0
call void(i8*) @print(i8* %str_ptr_reg105)
br label %statement_304
parse_label_277:
%param_ptr106 = getelementptr [50 x i32], [50 x i32]* %sp, i32 0, i32 0
%param_raw107 = load i32, i32* %param_ptr106
%truncated_byte108 = trunc i32 %param_raw107 to i8
%reg109 = add i8 0, %truncated_byte108
%reg110 = icmp eq i8 %reg109, 6
br i1 %reg110, label %statement_284, label %parse_label_293
statement_284:
br label %true_case_286
true_case_286:
br label %set_bool_reg_290
false_case_288:
br label %set_bool_reg_290
set_bool_reg_290:
%reg111 = phi i1 [1, %true_case_286], [0, %false_case_288]
ret i1 %reg111
parse_label_293:
%param_ptr112 = getelementptr [50 x i32], [50 x i32]* %sp, i32 0, i32 0
%param_raw113 = load i32, i32* %param_ptr112
%truncated_byte114 = trunc i32 %param_raw113 to i8
%reg115 = add i8 0, %truncated_byte114
%reg116 = icmp eq i8 %reg115, 9
br i1 %reg116, label %statement_300, label %statement_304
statement_300:
%str_ptr_reg117 = getelementptr [9 x i8], [9 x i8]* @.string_id18, i32 0, i32 0
call void(i8*) @print(i8* %str_ptr_reg117)
br label %statement_304
statement_304:
br label %false_case_308
true_case_306:
br label %set_bool_reg_310
false_case_308:
br label %set_bool_reg_310
set_bool_reg_310:
%reg118 = phi i1 [1, %true_case_306], [0, %false_case_308]
ret i1 %reg118
br label %func_end_314
func_end_314:
ret i1 0
}
define void@main(){
%sp = alloca [50 x i32]
br label %statement_320
statement_320:
call void() @returnFromWhile()
br label %statement_323
statement_323:
%reg119 = call i32() @returnFromWhile2()
%reg120 = add i32 0, %reg119
%reg121 = getelementptr [50 x i32], [50 x i32]* %sp, i32 0, i32 0
store i32 %reg120, i32* %reg121
br label %statement_329
statement_329:
call void() @returnFromSwitchInt()
br label %statement_332
statement_332:
%reg122 = call i32() @returnFromSwitchInt2()
%reg123 = add i32 0, %reg122
%reg124 = getelementptr [50 x i32], [50 x i32]* %sp, i32 0, i32 1
store i32 %reg123, i32* %reg124
br label %statement_338
statement_338:
call void() @returnFromSwitchByte()
br label %statement_341
statement_341:
%reg125 = call i8() @returnFromSwitchByte2()
%reg126 = add i8 0, %reg125
%raw_reg127 = zext i8 %reg126 to i32
%reg128 = getelementptr [50 x i32], [50 x i32]* %sp, i32 0, i32 2
store i32 %raw_reg127, i32* %reg128
br label %parse_label_348
parse_label_348:
%reg129 = call i1() @returnFromSwitchBool()
br i1 %reg129, label %true_case_351, label %false_case_353
true_case_351:
br label %statement_355
false_case_353:
br label %func_end_360
statement_355:
%str_ptr_reg130 = getelementptr [8 x i8], [8 x i8]* @.string_id19, i32 0, i32 0
call void(i8*) @print(i8* %str_ptr_reg130)
br label %func_end_360
br label %func_end_360
func_end_360:
ret void
}
