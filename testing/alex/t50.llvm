declare i32 @printf(i8*, ...)
declare void @exit(i32)
@.int_specifier = constant [4 x i8] c"%d\0A\00"
@.str_specifier = constant [4 x i8] c"%s\0A\00"
define void @printi(i32) {
    %spec_ptr = getelementptr [4 x i8], [4 x i8]* @.int_specifier, i32 0, i32 0
    call i32 (i8*, ...) @printf(i8* %spec_ptr, i32 %0)
    ret void
}
define void @print(i8*) {
    %spec_ptr = getelementptr [4 x i8], [4 x i8]* @.str_specifier, i32 0, i32 0
    call i32 (i8*, ...) @printf(i8* %spec_ptr, i8* %0)
    ret void
}
@.str_div_zero = constant [23 x i8] c"Error division by zero\00"
define void @errorIfZero9001(i32) {
	%cond = icmp eq i32 0, %0
	br i1 %cond, label %exit, label %return
exit:
	%err_str_ptr = getelementptr [23 x i8], [23 x i8]* @.str_div_zero, i32 0, i32 0
	call void(i8*) @print(i8* %err_str_ptr)
	call void(i32) @exit(i32 1)
	br label %return
return:
	ret void
}
@.string_id0 = constant [31 x i8] c"Check early exit from while...\00"
@.string_id1 = constant [26 x i8] c"failed... let's try again\00"
@.string_id2 = constant [31 x i8] c"Check early exit from while...\00"
@.string_id3 = constant [26 x i8] c"failed... let's try again\00"
@.string_id4 = constant [32 x i8] c"check early exit from switch...\00"
@.string_id5 = constant [8 x i8] c"failed2\00"
@.string_id6 = constant [8 x i8] c"failed8\00"
@.string_id7 = constant [32 x i8] c"check early exit from switch...\00"
@.string_id8 = constant [8 x i8] c"failed2\00"
@.string_id9 = constant [8 x i8] c"failed8\00"
@.string_id10 = constant [32 x i8] c"check early exit from switch...\00"
@.string_id11 = constant [9 x i8] c"failed1b\00"
@.string_id12 = constant [9 x i8] c"failed7b\00"
@.string_id13 = constant [32 x i8] c"check early exit from switch...\00"
@.string_id14 = constant [9 x i8] c"failed1b\00"
@.string_id15 = constant [9 x i8] c"failed7b\00"
@.string_id16 = constant [32 x i8] c"check early exit from switch...\00"
@.string_id17 = constant [9 x i8] c"failed3b\00"
@.string_id18 = constant [9 x i8] c"failed9b\00"
@.string_id19 = constant [8 x i8] c"SUCCESS\00"
define void@returnFromWhile(){
%sp = alloca [50 x i32]
br label %statement_3
statement_3:
%reg1 = getelementptr [50 x i32], [50 x i32]* %sp, i32 0, i32 0
store i32  0, i32* %reg1
br label %cond_7
cond_7:
%param_ptr2 = getelementptr [50 x i32], [50 x i32]* %sp, i32 0, i32 0
%param_raw3 = load i32, i32* %param_ptr2
%reg4 = add i32 0, %param_raw3
%reg5 = icmp slt i32 %reg4,  10
br i1 %reg5, label %statement_13, label %func_end_32
statement_13:
%str_ptr_reg6 = getelementptr [31 x i8], [31 x i8]* @.string_id0, i32 0, i32 0
call void(i8*) @print(i8* %str_ptr_reg6)
br label %statement_17
statement_17:
ret void
statement_19:
%param_ptr7 = getelementptr [50 x i32], [50 x i32]* %sp, i32 0, i32 0
%param_raw8 = load i32, i32* %param_ptr7
%reg9 = add i32 0, %param_raw8
%reg10 = add i32 %reg9,  1
%reg11 = getelementptr [50 x i32], [50 x i32]* %sp, i32 0, i32 0
store i32 %reg10, i32* %reg11
br label %statement_27
statement_27:
%str_ptr_reg12 = getelementptr [26 x i8], [26 x i8]* @.string_id1, i32 0, i32 0
call void(i8*) @print(i8* %str_ptr_reg12)
br label %cond_7
br label %func_end_32
func_end_32:
ret void
}
define i32@returnFromWhile2(){
%sp = alloca [50 x i32]
br label %statement_38
statement_38:
%reg13 = getelementptr [50 x i32], [50 x i32]* %sp, i32 0, i32 0
store i32  2, i32* %reg13
br label %cond_42
cond_42:
%param_ptr14 = getelementptr [50 x i32], [50 x i32]* %sp, i32 0, i32 0
%param_raw15 = load i32, i32* %param_ptr14
%reg16 = add i32 0, %param_raw15
%reg17 = icmp slt i32 %reg16,  10
br i1 %reg17, label %statement_48, label %func_end_70
statement_48:
%str_ptr_reg18 = getelementptr [31 x i8], [31 x i8]* @.string_id2, i32 0, i32 0
call void(i8*) @print(i8* %str_ptr_reg18)
br label %statement_52
statement_52:
%param_ptr19 = getelementptr [50 x i32], [50 x i32]* %sp, i32 0, i32 0
%param_raw20 = load i32, i32* %param_ptr19
%reg21 = add i32 0, %param_raw20
ret i32%reg21
statement_57:
%param_ptr22 = getelementptr [50 x i32], [50 x i32]* %sp, i32 0, i32 0
%param_raw23 = load i32, i32* %param_ptr22
%reg24 = add i32 0, %param_raw23
%reg25 = add i32 %reg24,  1
%reg26 = getelementptr [50 x i32], [50 x i32]* %sp, i32 0, i32 0
store i32 %reg25, i32* %reg26
br label %statement_65
statement_65:
%str_ptr_reg27 = getelementptr [26 x i8], [26 x i8]* @.string_id3, i32 0, i32 0
call void(i8*) @print(i8* %str_ptr_reg27)
br label %cond_42
br label %func_end_70
func_end_70:
ret i32 0
}
define void@returnFromSwitchInt(){
%sp = alloca [50 x i32]
br label %statement_76
statement_76:
%str_ptr_reg28 = getelementptr [32 x i8], [32 x i8]* @.string_id4, i32 0, i32 0
call void(i8*) @print(i8* %str_ptr_reg28)
br label %statement_80
statement_80:
%reg29 = getelementptr [50 x i32], [50 x i32]* %sp, i32 0, i32 0
store i32  5, i32* %reg29
br label %parse_label_84
parse_label_84:
%param_ptr30 = getelementptr [50 x i32], [50 x i32]* %sp, i32 0, i32 0
%param_raw31 = load i32, i32* %param_ptr30
%reg32 = add i32 0, %param_raw31
%reg33 = icmp eq i32 %reg32,  2
br i1 %reg33, label %statement_90, label %parse_label_94
statement_90:
%str_ptr_reg34 = getelementptr [8 x i8], [8 x i8]* @.string_id5, i32 0, i32 0
call void(i8*) @print(i8* %str_ptr_reg34)
br label %func_end_113
parse_label_94:
%param_ptr35 = getelementptr [50 x i32], [50 x i32]* %sp, i32 0, i32 0
%param_raw36 = load i32, i32* %param_ptr35
%reg37 = add i32 0, %param_raw36
%reg38 = icmp eq i32 %reg37,  5
br i1 %reg38, label %statement_100, label %parse_label_102
statement_100:
ret void
parse_label_102:
%param_ptr39 = getelementptr [50 x i32], [50 x i32]* %sp, i32 0, i32 0
%param_raw40 = load i32, i32* %param_ptr39
%reg41 = add i32 0, %param_raw40
%reg42 = icmp eq i32 %reg41,  8
br i1 %reg42, label %statement_108, label %func_end_113
statement_108:
%str_ptr_reg43 = getelementptr [8 x i8], [8 x i8]* @.string_id6, i32 0, i32 0
call void(i8*) @print(i8* %str_ptr_reg43)
br label %func_end_113
br label %func_end_113
func_end_113:
ret void
}
define i32@returnFromSwitchInt2(){
%sp = alloca [50 x i32]
br label %statement_119
statement_119:
%str_ptr_reg44 = getelementptr [32 x i8], [32 x i8]* @.string_id7, i32 0, i32 0
call void(i8*) @print(i8* %str_ptr_reg44)
br label %statement_123
statement_123:
%reg45 = getelementptr [50 x i32], [50 x i32]* %sp, i32 0, i32 0
store i32  5, i32* %reg45
br label %parse_label_127
parse_label_127:
%param_ptr46 = getelementptr [50 x i32], [50 x i32]* %sp, i32 0, i32 0
%param_raw47 = load i32, i32* %param_ptr46
%reg48 = add i32 0, %param_raw47
%reg49 = icmp eq i32 %reg48,  2
br i1 %reg49, label %statement_133, label %parse_label_137
statement_133:
%str_ptr_reg50 = getelementptr [8 x i8], [8 x i8]* @.string_id8, i32 0, i32 0
call void(i8*) @print(i8* %str_ptr_reg50)
br label %statement_155
parse_label_137:
%param_ptr51 = getelementptr [50 x i32], [50 x i32]* %sp, i32 0, i32 0
%param_raw52 = load i32, i32* %param_ptr51
%reg53 = add i32 0, %param_raw52
%reg54 = icmp eq i32 %reg53,  5
br i1 %reg54, label %statement_143, label %parse_label_145
statement_143:
ret i32 0
parse_label_145:
%param_ptr55 = getelementptr [50 x i32], [50 x i32]* %sp, i32 0, i32 0
%param_raw56 = load i32, i32* %param_ptr55
%reg57 = add i32 0, %param_raw56
%reg58 = icmp eq i32 %reg57,  8
br i1 %reg58, label %statement_151, label %statement_155
statement_151:
%str_ptr_reg59 = getelementptr [8 x i8], [8 x i8]* @.string_id9, i32 0, i32 0
call void(i8*) @print(i8* %str_ptr_reg59)
br label %statement_155
statement_155:
ret i32 0
br label %func_end_158
func_end_158:
ret i32 0
}
define void@returnFromSwitchByte(){
%sp = alloca [50 x i32]
br label %statement_164
statement_164:
%str_ptr_reg60 = getelementptr [32 x i8], [32 x i8]* @.string_id10, i32 0, i32 0
call void(i8*) @print(i8* %str_ptr_reg60)
br label %statement_168
statement_168:
%raw_reg61 = zext i8  4 to i32
%reg62 = getelementptr [50 x i32], [50 x i32]* %sp, i32 0, i32 0
store i32 %raw_reg61, i32* %reg62
br label %parse_label_173
parse_label_173:
%param_ptr63 = getelementptr [50 x i32], [50 x i32]* %sp, i32 0, i32 0
%param_raw64 = load i32, i32* %param_ptr63
%truncated_byte65 = trunc i32 %param_raw64 to i8
%reg66 = add i8 0, %truncated_byte65
%reg67 = icmp eq i8 %reg66,  1
br i1 %reg67, label %statement_180, label %parse_label_184
statement_180:
%str_ptr_reg68 = getelementptr [9 x i8], [9 x i8]* @.string_id11, i32 0, i32 0
call void(i8*) @print(i8* %str_ptr_reg68)
br label %func_end_205
parse_label_184:
%param_ptr69 = getelementptr [50 x i32], [50 x i32]* %sp, i32 0, i32 0
%param_raw70 = load i32, i32* %param_ptr69
%truncated_byte71 = trunc i32 %param_raw70 to i8
%reg72 = add i8 0, %truncated_byte71
%reg73 = icmp eq i8 %reg72,  4
br i1 %reg73, label %statement_191, label %parse_label_193
statement_191:
ret void
parse_label_193:
%param_ptr74 = getelementptr [50 x i32], [50 x i32]* %sp, i32 0, i32 0
%param_raw75 = load i32, i32* %param_ptr74
%truncated_byte76 = trunc i32 %param_raw75 to i8
%reg77 = add i8 0, %truncated_byte76
%reg78 = icmp eq i8 %reg77,  7
br i1 %reg78, label %statement_200, label %func_end_205
statement_200:
%str_ptr_reg79 = getelementptr [9 x i8], [9 x i8]* @.string_id12, i32 0, i32 0
call void(i8*) @print(i8* %str_ptr_reg79)
br label %func_end_205
br label %func_end_205
func_end_205:
ret void
}
define i8@returnFromSwitchByte2(){
%sp = alloca [50 x i32]
br label %statement_211
statement_211:
%str_ptr_reg80 = getelementptr [32 x i8], [32 x i8]* @.string_id13, i32 0, i32 0
call void(i8*) @print(i8* %str_ptr_reg80)
br label %statement_215
statement_215:
%raw_reg81 = zext i8  4 to i32
%reg82 = getelementptr [50 x i32], [50 x i32]* %sp, i32 0, i32 0
store i32 %raw_reg81, i32* %reg82
br label %parse_label_220
parse_label_220:
%param_ptr83 = getelementptr [50 x i32], [50 x i32]* %sp, i32 0, i32 0
%param_raw84 = load i32, i32* %param_ptr83
%truncated_byte85 = trunc i32 %param_raw84 to i8
%reg86 = add i8 0, %truncated_byte85
%reg87 = icmp eq i8 %reg86,  1
br i1 %reg87, label %statement_227, label %parse_label_231
statement_227:
%str_ptr_reg88 = getelementptr [9 x i8], [9 x i8]* @.string_id14, i32 0, i32 0
call void(i8*) @print(i8* %str_ptr_reg88)
br label %statement_251
parse_label_231:
%param_ptr89 = getelementptr [50 x i32], [50 x i32]* %sp, i32 0, i32 0
%param_raw90 = load i32, i32* %param_ptr89
%truncated_byte91 = trunc i32 %param_raw90 to i8
%reg92 = add i8 0, %truncated_byte91
%reg93 = icmp eq i8 %reg92,  4
br i1 %reg93, label %statement_238, label %parse_label_240
statement_238:
ret i8 0
parse_label_240:
%param_ptr94 = getelementptr [50 x i32], [50 x i32]* %sp, i32 0, i32 0
%param_raw95 = load i32, i32* %param_ptr94
%truncated_byte96 = trunc i32 %param_raw95 to i8
%reg97 = add i8 0, %truncated_byte96
%reg98 = icmp eq i8 %reg97,  7
br i1 %reg98, label %statement_247, label %statement_251
statement_247:
%str_ptr_reg99 = getelementptr [9 x i8], [9 x i8]* @.string_id15, i32 0, i32 0
call void(i8*) @print(i8* %str_ptr_reg99)
br label %statement_251
statement_251:
ret i8 0
br label %func_end_254
func_end_254:
ret i8 0
}
define i1@returnFromSwitchBool(){
%sp = alloca [50 x i32]
br label %statement_260
statement_260:
%str_ptr_reg100 = getelementptr [32 x i8], [32 x i8]* @.string_id16, i32 0, i32 0
call void(i8*) @print(i8* %str_ptr_reg100)
br label %statement_264
statement_264:
%raw_reg101 = zext i8  6 to i32
%reg102 = getelementptr [50 x i32], [50 x i32]* %sp, i32 0, i32 0
store i32 %raw_reg101, i32* %reg102
br label %parse_label_269
parse_label_269:
%param_ptr103 = getelementptr [50 x i32], [50 x i32]* %sp, i32 0, i32 0
%param_raw104 = load i32, i32* %param_ptr103
%truncated_byte105 = trunc i32 %param_raw104 to i8
%reg106 = add i8 0, %truncated_byte105
%reg107 = icmp eq i8 %reg106,  3
br i1 %reg107, label %statement_276, label %parse_label_280
statement_276:
%str_ptr_reg108 = getelementptr [9 x i8], [9 x i8]* @.string_id17, i32 0, i32 0
call void(i8*) @print(i8* %str_ptr_reg108)
br label %statement_307
parse_label_280:
%param_ptr109 = getelementptr [50 x i32], [50 x i32]* %sp, i32 0, i32 0
%param_raw110 = load i32, i32* %param_ptr109
%truncated_byte111 = trunc i32 %param_raw110 to i8
%reg112 = add i8 0, %truncated_byte111
%reg113 = icmp eq i8 %reg112,  6
br i1 %reg113, label %statement_287, label %parse_label_296
statement_287:
br label %true_case_289
true_case_289:
br label %set_bool_reg_293
false_case_291:
br label %set_bool_reg_293
set_bool_reg_293:
%reg114 = phi i1 [1, %true_case_289], [0, %false_case_291]
ret i1 %reg114
parse_label_296:
%param_ptr115 = getelementptr [50 x i32], [50 x i32]* %sp, i32 0, i32 0
%param_raw116 = load i32, i32* %param_ptr115
%truncated_byte117 = trunc i32 %param_raw116 to i8
%reg118 = add i8 0, %truncated_byte117
%reg119 = icmp eq i8 %reg118,  9
br i1 %reg119, label %statement_303, label %statement_307
statement_303:
%str_ptr_reg120 = getelementptr [9 x i8], [9 x i8]* @.string_id18, i32 0, i32 0
call void(i8*) @print(i8* %str_ptr_reg120)
br label %statement_307
statement_307:
br label %false_case_311
true_case_309:
br label %set_bool_reg_313
false_case_311:
br label %set_bool_reg_313
set_bool_reg_313:
%reg121 = phi i1 [1, %true_case_309], [0, %false_case_311]
ret i1 %reg121
br label %func_end_317
func_end_317:
ret i1 0
}
define void@main(){
%sp = alloca [50 x i32]
br label %statement_323
statement_323:
call void() @returnFromWhile()
br label %statement_326
statement_326:
%reg122 = call i32() @returnFromWhile2()
%reg123 = add i32 0, %reg122
%reg124 = getelementptr [50 x i32], [50 x i32]* %sp, i32 0, i32 0
store i32 %reg123, i32* %reg124
br label %statement_332
statement_332:
call void() @returnFromSwitchInt()
br label %statement_335
statement_335:
%reg125 = call i32() @returnFromSwitchInt2()
%reg126 = add i32 0, %reg125
%reg127 = getelementptr [50 x i32], [50 x i32]* %sp, i32 0, i32 1
store i32 %reg126, i32* %reg127
br label %statement_341
statement_341:
call void() @returnFromSwitchByte()
br label %statement_344
statement_344:
%reg128 = call i8() @returnFromSwitchByte2()
%reg129 = add i8 0, %reg128
%raw_reg130 = zext i8 %reg129 to i32
%reg131 = getelementptr [50 x i32], [50 x i32]* %sp, i32 0, i32 2
store i32 %raw_reg130, i32* %reg131
br label %parse_label_351
parse_label_351:
%reg132 = call i1() @returnFromSwitchBool()
br i1 %reg132, label %true_case_354, label %false_case_356
true_case_354:
br label %statement_358
false_case_356:
br label %func_end_363
statement_358:
%str_ptr_reg133 = getelementptr [8 x i8], [8 x i8]* @.string_id19, i32 0, i32 0
call void(i8*) @print(i8* %str_ptr_reg133)
br label %func_end_363
br label %func_end_363
func_end_363:
ret void
}
