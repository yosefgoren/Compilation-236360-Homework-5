declare i32 @printf(i8*, ...)
declare void @exit(i32)
@.int_specifier = constant [4 x i8] c"%d\0A\00"
@.str_specifier = constant [4 x i8] c"%s\0A\00"
define void @printi(i32) {
    %spec_ptr = getelementptr [4 x i8], [4 x i8]* @.int_specifier, i32 0, i32 0
    call i32 (i8*, ...) @printf(i8* %spec_ptr, i32 %0)
    ret void
}
define void @print(i8*) {
    %spec_ptr = getelementptr [4 x i8], [4 x i8]* @.str_specifier, i32 0, i32 0
    call i32 (i8*, ...) @printf(i8* %spec_ptr, i8* %0)
    ret void
}
@.str_div_zero = constant [23 x i8] c"Error division by zero\00"
define void @errorIfZero9001(i32) {
	%cond = icmp eq i32 0, %0
	br i1 %cond, label %exit, label %return
exit:
	%err_str_ptr = getelementptr [23 x i8], [23 x i8]* @.str_div_zero, i32 0, i32 0
	call void(i8*) @print(i8* %err_str_ptr)
	call void(i32) @exit(i32 1)
	br label %return
return:
	ret void
}
@.string_id0 = constant [18 x i8] c"This should print\00"
@.string_id1 = constant [21 x i8] c"This shouldn't print\00"
define i1@f(){
%sp = alloca [50 x i32]
br label %statement_3
statement_3:
br label %parse_label_5
parse_label_5:
%reg1 = icmp slt i32  1,  0
br i1 %reg1, label %false_case_10, label %true_case_8
true_case_8:
br label %set_bool_reg_12
false_case_10:
br label %set_bool_reg_12
set_bool_reg_12:
%reg2 = phi i1 [1, %true_case_8], [0, %false_case_10]
ret i1 %reg2
br label %func_end_16
func_end_16:
ret i1 0
}
define void@main(){
%sp = alloca [50 x i32]
br label %parse_label_22
parse_label_22:
%reg3 = call i1() @f()
br i1 %reg3, label %true_case_25, label %false_case_27
true_case_25:
br label %statement_34
false_case_27:
br label %parse_label_29
parse_label_29:
call void(i32) @errorIfZero9001(i32  0)
%reg4 = sdiv i32  5,  0
%reg5 = icmp eq i32 %reg4,  1
br i1 %reg5, label %statement_34, label %statement_38
statement_34:
%str_ptr_reg6 = getelementptr [18 x i8], [18 x i8]* @.string_id0, i32 0, i32 0
call void(i8*) @print(i8* %str_ptr_reg6)
br label %statement_38
statement_38:
%raw_reg7 = zext i8  0 to i32
%reg8 = getelementptr [50 x i32], [50 x i32]* %sp, i32 0, i32 0
store i32 %raw_reg7, i32* %reg8
br label %parse_label_43
parse_label_43:
%param_ptr9 = getelementptr [50 x i32], [50 x i32]* %sp, i32 0, i32 0
%param_raw10 = load i32, i32* %param_ptr9
%truncated_byte11 = trunc i32 %param_raw10 to i8
%reg12 = add i8 0, %truncated_byte11
%raw_reg13 = zext i8 %reg12 to i32
call void(i32) @errorIfZero9001(i32 %raw_reg13)
%b2int_conv_reg14 = zext i8 %reg12 to i32
%reg15 = sdiv i32  5, %b2int_conv_reg14
%reg16 = icmp eq i32 %reg15,  1
br i1 %reg16, label %statement_61, label %parse_label_54
parse_label_54:
%reg17 = call i1() @f()
br i1 %reg17, label %true_case_57, label %false_case_59
true_case_57:
br label %statement_61
false_case_59:
br label %func_end_66
statement_61:
%str_ptr_reg18 = getelementptr [21 x i8], [21 x i8]* @.string_id1, i32 0, i32 0
call void(i8*) @print(i8* %str_ptr_reg18)
br label %func_end_66
br label %func_end_66
func_end_66:
ret void
}
